import javax.management.StringValueExp;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;
import java.util.Random; // for unique ID
import java.util.Scanner; //to read the CSV file
import java.util.ArrayList;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.stream.Collectors;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.FileWriter;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.util.concurrent.ThreadLocalRandom;

//https://www.youtube.com/watch?v=-95U3CZPlE8 referenced for reading the CSV FILE

//https://www.youtube.com/watch?v=TpyRKom0X_s to edit certain parts of CSV TO DO!

//TO DO let user change user options

public class FinishedSprint1 {
    public static void main(String[] args) throws FileNotFoundException {
         Scanner inputScanner = new Scanner(System.in);
        int rerun = -3;
        String username="";
        String password="";
        String firstname="";
        String lastname="";
        String email="";
        String SSNinput="";
        int ID=0;
        String uniqID="";
        String DOB;
        double minimumdeposit = 0;
        long phonenum=0;
        UserData user=new UserData();

        while (rerun != -1) { // so user can return to welcome page
            Boolean valid = false;
            while (!valid) { // User must have valid response so he doesnt glitch the code
                System.out.println("Welcome! Would you like to sign in or sign up?");
                String signinorsignup = inputScanner.nextLine().toLowerCase().replace(" ", ""); // replaces spaces, e.g., "Sign in" becomes "Signin" (edge-casing)

                if (signinorsignup.equalsIgnoreCase("Signup")) {
                    System.out.print("Welcome to the bank! Please type in a Username of your choice: ");
                     username = inputScanner.nextLine();
                    String usernameexists = existinguser(username);

                    while (username == null || username.isEmpty() || usernameexists.equals("already exists")) { // isEmpty so it doesnâ€™t edge-case and return a value
                        if (usernameexists.equals("already exists")) {
                            System.out.print("This username is already taken. Please enter a different Username: ");
                        } else {
                            System.out.print("Username cannot be empty. Please enter your Username: ");
                        }
                        username = inputScanner.nextLine();
                        usernameexists = existinguser(username);
                    }

                    System.out.print("Hello " + username + ", please create your Password: ");
                     password = inputScanner.nextLine();
                    while (password == null || password.isEmpty() || password.equals("forgotpassword")) {


                        if(password.equalsIgnoreCase("forgotpassword")) {
                            System.out.print("Sorry, your password cannot be forgotpassword, please choose another password: ");
                            password = inputScanner.nextLine();
                        }else{
                            System.out.print("Password cannot be empty. Please create your Password: ");
                            password = inputScanner.nextLine();
                        }
                    }

                    System.out.print(username + ", please enter your First Name: ");
                     firstname = inputScanner.nextLine();
                    while (firstname == null || firstname.isEmpty()) {
                        System.out.print("First Name cannot be empty. Please enter your First Name: ");
                        firstname = inputScanner.nextLine();
                    }

                    System.out.print(firstname + ", please enter your Last Name: ");
                     lastname = inputScanner.nextLine();
                    while (lastname == null || lastname.isEmpty()) {
                        System.out.print("Last Name cannot be empty. Please enter your Last Name: ");
                        lastname = inputScanner.nextLine();
                    }

                    System.out.print("Enter your Social Security number (9 digits, no dashes): ");
                     SSNinput = inputScanner.nextLine();

                    // Ensure the SSN is exactly 9 digits and contains only numbers
                    while (SSNinput == null || !SSNinput.matches("\\d{9}") || SSNinput.isEmpty()) {
                        System.out.print("Invalid SSN. Please enter exactly 9 digits, no dashes: ");
                        SSNinput = inputScanner.nextLine();
                    }

                    int SSN = Integer.parseInt(SSNinput);

                    System.out.print("Enter your DOB (MMDDYYYY, no slashes): ");
                     DOB = inputScanner.nextLine();
                    while (DOB == null || DOB.isEmpty() || !DOB.matches("\\d{8}")) {
                        System.out.print("Invalid Date of Birth. Please enter exactly 8 digits, no slashes: ");
                        DOB = inputScanner.nextLine();
                    }

                    System.out.print("Enter your email: ");
                     email = inputScanner.nextLine();
                    while (email == null || !email.contains("@") || email.isEmpty()) {
                        System.out.print("Invalid email. Please enter a valid email with '@': ");
                        email = inputScanner.nextLine();
                    }

                    System.out.print("Enter your phone number: ");
                    String phone = inputScanner.nextLine();
                    while (phone == null || phone.isEmpty() || !phone.matches("\\d{10}")) {
                        System.out.print("Invalid phone number. Please enter a valid phone number with 10 digits: ");
                        phone = inputScanner.nextLine();
                    }
                     phonenum = Long.parseLong(phone);

                    System.out.println("Choose from one of the banks below to set as your default bank: ");
                    System.out.println("1. Bank of Old Bridge");
                    System.out.println("2. Bank of Dallas");
                    System.out.println("3. Bank of Los Angeles");
                    System.out.println("4. Bank of Detroit");
                    System.out.println("5. Bank of Denver");
                    String bankchoice = inputScanner.nextLine();
                    while (bankchoice == null || bankchoice.isEmpty() || !bankchoice.matches("\\d{1}")) {
                        System.out.print("Please choose a valid number to set as your default bank:");
                        System.out.println("1. Bank of Old Bridge");
                        System.out.println("2. Bank of Dallas");
                        System.out.println("3. Bank of Los Angeles");
                        System.out.println("4. Bank of Detroit");
                        System.out.println("5. Bank of Denver");
                        bankchoice = inputScanner.nextLine();

                    }
                    String choiceOfBank="";
                    if (bankchoice.equals("1")){
                         choiceOfBank="Bank of Old Bridge";
                    }else if (bankchoice.equals("2")){
                         choiceOfBank="Bank of Dallas";
                    }else if (bankchoice.equals("3")){
                         choiceOfBank="Bank of Los Angeles";
                    }else if (bankchoice.equals("4")){
                         choiceOfBank="Bank of Detroit";
                    }else if (bankchoice.equals("5")){
                         choiceOfBank="Bank of Denver";
                    }



                     minimumdeposit = 0;
                    double validminimumdepositvalue = 25;
                    while (minimumdeposit < validminimumdepositvalue) {
                        System.out.print("Enter your minimum deposit (must be at least $25): ");
                        String depositInput = inputScanner.nextLine();

                        // Check if the input is blank
                        if (depositInput.isEmpty()) {
                            System.out.println("Deposit cannot be blank. Please enter a valid amount.");
                        } else {
                            // Check if the input can be parsed as a valid number and meets the minimum deposit
                            if (depositInput.matches("\\d+(\\.\\d+)?")) { // checks if it's a valid number
                                minimumdeposit = Double.parseDouble(depositInput);
                                if (minimumdeposit < validminimumdepositvalue) {
                                    System.out.println("Deposit must be at least $25. Please try again.");
                                }
                            } else {
                                System.out.println("Invalid input. Please enter a valid numeric value.");
                            }
                        }
                    }
                     ID = genid();
                     uniqID = String.valueOf(ID);
                     user.setUsername(username);
                     user.setPassword(password);
                     user.setFirstname(firstname);
                     user.setLastname(lastname);
                     user.setEmail(email);
                     user.setSsn(SSN);
                     user.setPhone(phonenum);
                     user.setMinimumdeposit(minimumdeposit);
                     user.setDob(DOB);
                     user.setID(ID);

                    addUser(username, password, firstname, lastname, SSN, DOB, email, phonenum, minimumdeposit,choiceOfBank, ID);

                    //USER CHOICE GOES HERE
                    valid = true;


                } else if (signinorsignup.equalsIgnoreCase("SignIn")) { // STILL IN WORK GOTTA DO CSV FILE FIRST
                    System.out.print("Welcome To the bank Please enter your Username: ");
                     username = inputScanner.nextLine();

                    // Assuming users() is a method that retrieves user data based on the username
                     user = users(username);

                    // While loop to check if the username is found and keeps going so you cant break it
                    while (user == null) {
                        System.out.print("Your username was not found. Please enter your Username: ");
                        username = inputScanner.nextLine();
                        user = users(username);
                    }

                    System.out.print("Hey " + user.getFirstname() + "! Please enter your Password or enter forgotpassword to change your password: ");
                     password = inputScanner.nextLine();
                    String truePassword = user.getPassword();

                    // Remove spaces from entered password
                    String forgotpassword = password;
                    forgotpassword = forgotpassword.replace(" ", "");

                    int passwordmatch = -1;
                    while (passwordmatch < 0) {
                        if (truePassword.equals(password)) {
                            // Password matches, welcome the user
                            passwordmatch = 1; // Exit the loop
                        } else if (forgotpassword.equalsIgnoreCase("forgotpassword")) {
                            // User forgot password, proceed to reset
                            System.out.print("Please enter your Social Security number without dashes to reset your password: ");
                            String recoveracct = inputScanner.nextLine();


                            // Ensure SSN has no dashes before proceeding
                            while (recoveracct.contains("-")) {
                                System.out.print("Dashes are not allowed. Please enter your Social Security number again: ");
                                recoveracct = inputScanner.nextLine();
                            }

                            int ssn = user.getSsn(); // Get the user's SSN
                            String SSNtoString = Integer.toString(ssn);
                            boolean SSNmatch = false;

                            // Prompt for SSN until the correct one is entered
                            while (!SSNmatch) {
                                if (recoveracct.equals(SSNtoString)) {
                                    // SSN matches, ask for new password
                                    System.out.print("Enter your new password: ");
                                    String newpassword = inputScanner.nextLine();
                                    user.setPassword(newpassword); // Sets it as new password
                                    System.out.println( "Password reset successfully!");
                                    SSNmatch = true; // Successfully reset password, exit the loop
                                    AppendCSV(truePassword, 1, newpassword,user.getUniqID()); // Append new password to CSV or save securely
                                    passwordmatch = 1; // Exit the outer loop since password was reset
                                } else {
                                    // SSN doesn't match, prompt again
                                    System.out.print("Your Social Security number did not match. Please enter it again: ");
                                    recoveracct = inputScanner.nextLine();

                                    // Ensure no dashes in SSN input again
                                    while (recoveracct.contains("-")) {
                                       System.out.print("Dashes are not allowed. Please enter your Social Security number again: ");
                                       recoveracct = inputScanner.nextLine();
                                    }
                                }
                            }
                        } else {
                            // If password is incorrect and "forgot password" was not entered, prompt again
                            System.out.print("Incorrect password. Please try again, or enter forgotpassword to reset your password: ");
                            password = inputScanner.nextLine();
                            forgotpassword = password.replace(" ", "");
                        }

                    }
                    valid=true;




                } else {
                    System.out.println( "Invalid Input");
                }

            }
            System.out.println("Welcome back! "+user.getFirstname());
            boolean exit=false;
            while (exit==false) {
                        System.out.println("Please choose an option: ");
                        System.out.println("[1] Access Credit Card");
                        System.out.println("[2] Access Debit Card");
                        System.out.println("[3] Access CD");
                        System.out.println("[4] Access ATM & Money Transfer");//ATM, MONEY TRANSFER, Foreign Exchange
                        System.out.println("[5] Manage Checking Account");
                        System.out.println("[6] Manage Savings Account");
                        System.out.println("[7] Manage Loans & Mortgages");
                        System.out.println("[8] Manage Safety Deposit Box  ");// Student, Homeloan, personal loan etc
                        System.out.println("[9] Change Personal Information");
                        System.out.println("[10] Log Out ");// Username, pass, first and last name, SSN, DOB, email, phone num

                
                        String MenuOptions = inputScanner.nextLine();
                        if (MenuOptions.equals("1")) {
                            String checkingacctexists=checkingacctexists(String.valueOf(user.getUniqID()));
                            String savingsacctexists=savingsacctexists(String.valueOf(user.getUniqID()));

                            if(checkingacctexists.equals("does not exists")|| savingsacctexists.equals("does not exists")){
                                System.out.println("Please create a checkings account and savings account before you try to access credit card");
                            }else{
                                Scanner scanner = new Scanner(System.in);
                                CreditCard creditCard = new CreditCard();
                                creditCard.mainMenu(scanner);
                            }
                            //Gabby AND ANT


                        }else if (MenuOptions.equals("2")) {
                            String checkingacctexists=checkingacctexists(String.valueOf(user.getUniqID()));
                            String savingsacctexists=savingsacctexists(String.valueOf(user.getUniqID()));

                            if(checkingacctexists.equals("does not exists")|| savingsacctexists.equals("does not exists")){
                                System.out.println("Please create a checkings account and savings account before you try to access debit card");
                            }else {

                                Scanner scanner = new Scanner(System.in);
                                // Ensure that the account_info.csv file exists
                                ensureFile("src/account_info.csv");
                                boolean inDebitmenu = true;

                                while (inDebitmenu == true) {
                                    System.out.println("Choose an option:");
                                    System.out.println("1. View existing account info");
                                    System.out.println("2. Create a new account");
                                    System.out.println("3. Close an account");
                                    System.out.println("4. Return to Main Menu"); // <--- ADD this

                                    String option = scanner.nextLine().trim();

                                    switch (option) {
                                        case "1" -> viewAccountInfo(scanner);
                                        case "2" -> createNewAccount(scanner, user.getUniqID());
                                        case "3" -> closeAccount(scanner);
                                        case "4" -> {
                                            inDebitmenu = false;

                                        }
                                        default -> System.out.println("Invalid option. Please try again.");
                                    }
                                }
                            }



                        }else if (MenuOptions.equals("3")) {

                             Scanner userinput = new Scanner(System.in);

                            System.out.println("Enter User Name:");
                            String name = userinput.nextLine();
                            System.out.println("Welcome New User " + name);

                            // Ask if the user wants to create a certificate of deposit
                            System.out.println("Would you like to create a certificate of deposit at this time? (yes/no)");
                            String response = userinput.nextLine();

                            // Handle user input for creating a CD
                            if (response.equalsIgnoreCase("yes")) {
                                System.out.println("Great! Let's get started with setting up your certificate of deposit.");

                                // Create CDinterface instance to manage CDs
                                CDinterface CDI = new CDinterface();

                                // Add predefined CDs to the list
                                CDI.addCD(new CD(3, 5000.00, 1.45));
                                CDI.addCD(new CD(6, 5000.00, 2.00));
                                CDI.addCD(new CD(12, 5000.00, 2.75));

                                // Display the available CD options
                                CDI.displayCD();
                                double userAmount = 0.00;
                                // Ask user if they want to purchase one of the displayed CDs
                                System.out.println("Do any of these options appeal to you? (y/n)");
                                String selectResponse = userinput.nextLine();
                                if (selectResponse.equalsIgnoreCase("y")) {
                                    System.out.println("Which CD would you like to purchase? (Enter the option number)");
                                    int selection = userinput.nextInt();
                                    userinput.nextLine(); // Consume newline after nextInt()

                                    // Handle invalid input for selection
                                    if (selection > 0 && selection <= CDI.getCDOptionsSize()) {
                                        // Asking the user to input the amount they want to invest
                                        System.out.println("Enter the amount you want to invest into this CD (in dollars):");
                                        userAmount = userinput.nextDouble();
                                        userinput.nextLine(); // Consume newline after nextDouble()

                                        if (userAmount > 0) {
                                            // Proceeding with the purchase with the user-specified amount
                                            double maturityAmount = CDI.getCD(selection).calculateMaturityAmount(userAmount);
                                            System.out.println("You have selected CD option " + selection + " with an investment of $" + userAmount + ". At maturity, it will be worth $" + maturityAmount);
                                            // Proceed with the CD purchase simulation
                                            CDI.PurchaseCD(selection, userAmount);
                                            addUserstoCD(user.getUniqID(), CDI.getCD(selection).getTerm(), userAmount,CDI.getCD(selection).getIR());

                                        } else {
                                            System.out.println("Invalid investment amount. No CD purchased.");
                                        }
                                    } else {
                                        System.out.println("Invalid selection. No CD purchased.");
                                    }
                                } else {
                                    System.out.println("No CD selected.");
                                }

                                // Ask if the user wants to withdraw early
                                System.out.println("Do you want to withdraw your CD early? (yes/no)");
                                String earlyWithdrawResponse = userinput.nextLine();
                                if (earlyWithdrawResponse.equalsIgnoreCase("yes")) {
                                    double penalty = 0.01 * userAmount; // Default penalty rate (1%)
                                    System.out.println("You will forfeit all interest and be charged a late withdrawal fee of $" + penalty + ".");
                                    System.out.println("Your CD has been withdrawn early, and no interest is earned.");
                                } else if (earlyWithdrawResponse.equalsIgnoreCase("no")) {
                                    System.out.println("No problem! Let us know when you're ready (we recommend waiting until it matures).");
                                } else {
                                    System.out.println("Invalid answer, interpreting as no.");
                                }

                            } else if (response.equalsIgnoreCase("no")) {
                                System.out.println("No problem! If you change your mind, let us know.");
                            } else {
                                System.out.println("Invalid input. Please respond with 'yes' or 'no'.");
                            }



                            }else if (MenuOptions.equals("4")) {
                            String checkingacctexists=checkingacctexists(String.valueOf(user.getUniqID()));
                            String savingsacctexists=savingsacctexists(String.valueOf(user.getUniqID()));
                            if(savingsacctexists.equals("does not exists")|| checkingacctexists.equals("does not exists")){
                                System.out.println("Please create a checkings and savings account prior to accessing this ");
                            }else{
                                Boolean insideATMortransmenu=true;
                            while (insideATMortransmenu) {
                                System.out.println("Please choose an option: ");
                            System.out.println("[1] Access ATM");
                            System.out.println("[2] Access Money Transfer");
                            System.out.println("[3] Access Foreign Exchange rates and Foreign Money Transfer");
                            String AtmorMoneyTransfer = inputScanner.nextLine();
                            if (AtmorMoneyTransfer.equals("1")) {
                                Scanner scanner = new Scanner(System.in);
                                // Ensure that the account_info.csv file exists
                                ensureFile("src/account_info.csv");
                                boolean inDebitmenu = true;

                                while (inDebitmenu == true) {
                                    System.out.println("Choose an option:");
                                    System.out.println("1. View existing account info");
                                    System.out.println("2. Create a new account");
                                    System.out.println("3. Close an account");
                                    System.out.println("4. Return to Main Menu"); // <--- ADD this

                                    String option = scanner.nextLine().trim();

                                    switch (option) {
                                        case "1" -> viewAccountInfo(scanner);
                                        case "2" -> createNewAccount(scanner, user.getUniqID());
                                        case "3" -> closeAccount(scanner);
                                        case "4" -> {
                                            inDebitmenu = false;

                                        }
                                        default -> System.out.println("Invalid option. Please try again.");
                                    }
                                }

                            } else if (AtmorMoneyTransfer.equals("2")) {
                                boolean accselected = false;
                                String checkorsave;
                                Scanner scan = new Scanner(System.in);
                                DecimalFormat df = new DecimalFormat("0.00"); // Format for currency

                                System.out.print("What account would you like to transfer from, checking [1] or savings [2]? ");
                                while (!accselected) {
                                    String transAcc = scan.nextLine().trim();
                                    if (transAcc.equals("1")) {
                                        System.out.println("You selected checking.");
                                        checkorsave = "checking";
                                        accselected = true;
                                    } else if (transAcc.equals("2")) {
                                        System.out.println("You selected savings.");
                                        checkorsave = "savings";
                                        accselected = true;
                                    } else {
                                        System.out.println("Invalid input. Please type 1 for checking or 2 for savings.");
                                    }
                                }

                                String accNum;
                                boolean validAcc = false;
                                while (!validAcc) {
                                    System.out.println("Please enter your 12-digit account number:");
                                    System.out.print("#");
                                    accNum = scan.nextLine().trim();

                                    if (accNum.matches("\\d{12}")) {
                                        System.out.println("Account number is valid.");
                                        validAcc = true;
                                    } else {
                                        System.out.println("Invalid account number. Please enter a valid 12-digit account number.");
                                    }
                                }

                                String routingNumber;
                                boolean validRoute = false;
                                while (!validRoute) {
                                    System.out.println("Please enter your 9-digit routing number:");
                                    System.out.print("#");
                                    routingNumber = scan.nextLine().trim();

                                    if (routingNumber.matches("\\d{9}")) {
                                        System.out.println("Routing number is valid.");
                                        validRoute = true;
                                    } else {
                                        System.out.println("Invalid routing number. Please enter a valid 9-digit routing number.");
                                    }
                                }

                                System.out.println("Please enter your billing address:");

                                System.out.print("Street Address: ");
                                String streetAddress = scan.nextLine().trim();

                                System.out.print("City: ");
                                String city = scan.nextLine().trim();

                                System.out.print("State: ");
                                String state = scan.nextLine().trim();

                                String zipCode = "";
                                boolean validZip = false;
                                while (!validZip) {
                                    System.out.print("Zip Code: ");
                                    zipCode = scan.nextLine().trim();

                                    if (zipCode.matches("\\d{5}")) {
                                        System.out.println("Zip Code is valid.");
                                        validZip = true;
                                    } else {
                                        System.out.println("Invalid Zip Code. Please enter a valid 5-digit zip code.");
                                    }
                                }

                                String country = "";
                                boolean validCountry = false;
                                double transferFee = 0.00;
                                while (!validCountry) {
                                    System.out.print("Country/Continent (Choose from USA, Canada, EU, China, UK): ");
                                    country = scan.nextLine().trim().toUpperCase();

                                    switch (country) {
                                        case "USA":
                                            transferFee = 0.02;
                                            validCountry = true;
                                            break;
                                        case "Canada":
                                            transferFee = 0.03;
                                            validCountry = true;
                                            break;
                                        case "EU":
                                            transferFee = 0.05;
                                            validCountry = true;
                                            break;
                                        case "CHINA":
                                            transferFee = 0.07;
                                            validCountry = true;
                                            break;
                                        case "UK":
                                            transferFee = 0.05;
                                            validCountry = true;
                                            break;
                                        default:
                                            System.out.println("Invalid country. Please enter USA, Canada, EU, China, or UK.");
                                    }
                                }

                                System.out.println("\nBilling Address:");
                                System.out.println("Street Address: " + streetAddress);
                                System.out.println("City/Province: " + city);
                                System.out.println("State/Region: " + state);
                                System.out.println("Zip Code/Postal Code: " + zipCode);
                                System.out.println("Country: " + country);

                                double amount = 0.0;
                                boolean validAmount = false;
                                while (!validAmount) {
                                    System.out.print("Enter the amount to transfer: ");
                                    if (scan.hasNextDouble()) {
                                        amount = scan.nextDouble();
                                        if (amount > 0) {
                                            validAmount = true;
                                        } else {
                                            System.out.println("Transfer amount must be greater than zero.");
                                        }
                                    } else {
                                        System.out.println("Invalid amount. Please enter a valid number with a decimal.");
                                        scan.next(); // Consume invalid input
                                    }
                                }

                                scan.nextLine(); // Consume newline

                                // Calculate total amount deducted
                                double totalAmount = amount + (amount * transferFee);

                                // Transfer Summary
                                System.out.println("\nTransfer Summary:");
                                System.out.println("Transfer Amount: $" + df.format(amount));
                                System.out.println("Transfer Fee: " + (transferFee * 100) + "%");
                                System.out.println("Total Amount Deducted: $" + df.format(totalAmount));

                                scan.close();

                            } else if (AtmorMoneyTransfer.equals("3")) {
                                //Exchange For
                                Scanner scanner = new Scanner(System.in);
                                FXBank.initializeFiles();
                                System.out.println("Welcome to Virtual FX Bank");


                                if (!FXBank.authenticateUser(firstname, lastname, String.valueOf(user.getSsn()))) {
                                    System.out.println("Authentication failed.");
                                    return;
                                }

                                while (true) {
                                    System.out.println("\n--- MENU ---");
                                    System.out.println("1. View Exchange Rates");
                                    System.out.println("2. Convert Currency");
                                    System.out.println("3. Exit");
                                    System.out.print("Choose option: ");
                                    String input = scanner.nextLine();
                                    if (input.equals("1")) {
                                        FXBank.showRates();
                                    } else if (input.equals("2")) {
                                        FXBank.performConversion();
                                    } else if (input.equals("3")) {
                                        System.out.println("Thank you for using FX Bank!");
                                        break;
                                    } else {
                                        System.out.println("Invalid choice.");
                                    }
                                }

                            } else if (AtmorMoneyTransfer.equals("4")) {
                                insideATMortransmenu=false;

                            }else{
                                System.out.println("Invalid choice. please pick a valid option");
                            }

                            }


                            }






                            }else if (MenuOptions.equals("5")) {
                                Scanner scan = new Scanner(System.in);
                                String userID = String.valueOf(user.getUniqID());
                                CheckingAccount checking = null;

                                try (BufferedReader br = new BufferedReader(new FileReader("src/checkingaccount.csv"))) {
                                    String line;
                                    br.readLine(); // skip header
                                    boolean accountFound = false;
                                    while ((line = br.readLine()) != null) {
                                        String[] data = line.split(",");
                                        if (data.length < 8) continue;
                                        if (data[0].equals(userID)) {
                                            String accID = data[0];
                                            String accNumber = data[1];
                                            String name = data[2];
                                            double balance = Double.parseDouble(data[3]);
                                            boolean overdraftProtection = Boolean.parseBoolean(data[4]);
                                            double overdraftLimit = Double.parseDouble(data[5]);
                                            SimpleDateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy", Locale.ENGLISH);
                                            Date dateOpened = formatter.parse(data[6]);
                                            Date lastTransactionDate = formatter.parse(data[7]);
                                            checking = new CheckingAccount(accID, accNumber, name, balance, overdraftProtection, overdraftLimit, dateOpened, lastTransactionDate);
                                            System.out.println("Account loaded successfully.");
                                            accountFound = true;
                                            break;
                                        }
                                    }
                                    if (!accountFound) {
                                        System.out.println("No existing account found. Creating a new one...");
                                        checking = createNewAccount(scan, userID); // Create a new account if none found
                                    }
                                } catch (IOException | ParseException e) {
                                    System.out.println("Error loading account, creating a new one...");
                                    checking = createNewAccount(scan, userID); // Fallback to create a new account
                                }

                                boolean running = true;
                                while (running) {
                                    System.out.print("Choose an option: Check Balance[1], Deposit[2], Withdraw[3], Account Info[4], Quit[5]: ");
                                    int option = getValidInput(scan, 1, 6);

                                    switch (option) {
                                        case 1:
                                            System.out.println("Balance: $" + checking.getBalance());
                                            break;
                                        case 2:
                                            System.out.print("Enter deposit amount: ");
                                            double depositAmount = getValidDouble(scan);
                                            checking.deposit(depositAmount);
                                            break;
                                        case 3:
                                            System.out.print("Enter withdrawal amount: ");
                                            double withdrawalAmount = getValidDouble(scan);
                                            if (!checking.withdraw(withdrawalAmount)) {
                                                System.out.println("Insufficient funds.");
                                            }
                                            break;
                                        case 4:
                                            displayAccountInfo(checking); // Display account info only if Checking is properly initialized
                                            break;
                                        case 5:
                                            running = false;
                                            System.out.println("Exiting.");
                                            break;
                                        case 6:
                                            deleteAccount(checking);
                                            checking = null;
                                            System.out.println("Account deleted.");
                                            running = false;
                                            break;

                                    }
                                }
                                scan.close();



                            }else if (MenuOptions.equals("6")) {
                                  final String CSV_FILE = "src/savingsaccount.csv";
                                  Scanner scan = new Scanner(System.in);
                                String userID = String.valueOf(user.getUniqID());
                                SavingsAccount savings = null;

                                try (BufferedReader br = new BufferedReader(new FileReader(CSV_FILE))) {
                                    String line;
                                    br.readLine(); // skip header
                                    boolean accountFound = false;
                                    while ((line = br.readLine()) != null) {
                                        String[] data = line.split(",");
                                        if (data.length < 8) continue;
                                        if (data[0].equals(userID)) {
                                            String accID = data[0];
                                            String accNumber = data[1];
                                            String name = data[2];
                                            double balance = Double.parseDouble(data[3]);
                                            boolean overdraftProtection = Boolean.parseBoolean(data[4]);
                                            double overdraftLimit = Double.parseDouble(data[5]);
                                            SimpleDateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy", Locale.ENGLISH);
                                            Date dateOpened = formatter.parse(data[6]);
                                            Date lastTransactionDate = formatter.parse(data[7]);
                                            savings = new SavingsAccount(accID, accNumber, name, balance, overdraftProtection, overdraftLimit, dateOpened, lastTransactionDate);
                                            System.out.println("Account loaded successfully.");
                                            accountFound = true;
                                            break;
                                        }
                                    }
                                    if (!accountFound) {
                                        System.out.println("No existing account found. Creating a new one...");
                                        savings = createNewAccounts(scan, userID); // Create a new account if none found
                                    }
                                } catch (IOException | ParseException e) {
                                    System.out.println("Error loading account, creating a new one...");
                                    savings = createNewAccounts(scan, userID); // Fallback to create a new account
                                }

                                boolean running = true;
                                while (running) {
                                    System.out.print("Choose an option: Check Balance[1], Deposit[2], Withdraw[3], Account Info[4], Quit[5]: ");
                                    int option = getValidInput(scan, 1, 6);

                                    switch (option) {
                                        case 1:
                                            System.out.println("Balance: $" + savings.getBalance());
                                            break;
                                        case 2:
                                            System.out.print("Enter deposit amount: ");
                                            double depositAmount = getValidDouble(scan);
                                            savings.deposit(depositAmount);
                                            break;
                                        case 3:
                                            System.out.print("Enter withdrawal amount: ");
                                            double withdrawalAmount = getValidDouble(scan);
                                            if (!savings.withdraw(withdrawalAmount)) {
                                                System.out.println("Insufficient funds.");
                                            }
                                            break;
                                        case 4:
                                            displayAccountInfo(savings); // Display account info only if Savings is properly initialized
                                            break;
                                        case 5:
                                            running = false;
                                            System.out.println("Exiting.");
                                            break;
                                        case 6:
                                            deleteAccount(savings);
                                            savings = null;
                                            System.out.println("Account deleted.");
                                            running = false;
                                            break;

                                    }
                                }
                                scan.close();



                            }else if (MenuOptions.equals("7")) {
                                Scanner scan = new Scanner(System.in);
                                Boolean insideloans=true;
                                while (insideloans) {
                                    System.out.println("Please choose an option");
                                    System.out.println("[1] Student Loan");
                                    System.out.println("[2] Mortgage");
                                    System.out.println("[3] Medical or Business Loans");
                                    System.out.println("[3] Return to Main Menu");
                                    String insidechoice=scan.nextLine();
                                    if (insidechoice.equals("1")) {
                                        Calendar calendar = Calendar.getInstance();
                                        Scanner scanner = new Scanner(System.in);
                                        System.out.print("Enter Student ID: ");
                                        int studentID = scanner.nextInt();
                                        scanner.nextLine();

                                        if (StudentLoanApplication.userExists(studentID)) {
                                            System.out.println("A user with this Student ID has already submitted an application.");
                                            scanner.close();

                                            return;
                                        }

                                        String unID=String.valueOf(user.getUniqID());

                                        System.out.print("Enter your full name: ");
                                        String name = scanner.nextLine();

                                        System.out.print("Enter your school name: ");
                                        String school = scanner.nextLine();

                                        System.out.print("Enter the loan amount you need: ");
                                        double loanAmount = scanner.nextDouble();

                                        System.out.print("Enter your annual income: ");
                                        double annualIncome = scanner.nextDouble();

                                        System.out.print("Enter your loan period (in years): ");
                                        int loanPeriod = scanner.nextInt();

                                        Date time_purchased = calendar.getTime();

                                        StudentLoanApplication application = new StudentLoanApplication(Integer.parseInt(unID), studentID, name, school, loanAmount, annualIncome, loanPeriod, time_purchased
                                        );

                                        application.displayApplicationDetails();
                                        StudentLoanApplication.writeToFile(application);

                                        scanner.close();
                                    }else if (insidechoice.equals("2")) {
                                         HomeLoanManager loanManager = new HomeLoanManager();
                                         loanManager.displayMainMenu();

                                    }else if (insidechoice.equals("3")) {
                                        Scanner scanner = new Scanner(System.in);
                                        Boolean insideMedorBusinessLoan=true;
                                        while (insideMedorBusinessLoan) {
                                            System.out.println("=== Loan Processing System ===");
                                        System.out.println("1. Create a MedicalLoan");
                                        System.out.println("2. Create a BusinessLoan");
                                        System.out.println("3. return to main menu");
                                        int choice = scanner.nextInt();
                                        scanner.nextLine(); // consume newline

                                        if (choice == 1) {
                                            System.out.print("Enter borrower name: ");
                                            String mName = scanner.nextLine().trim();
                                            System.out.print("Enter loan amount: ");
                                            double mAmt = Double.parseDouble(scanner.nextLine().trim());
                                            System.out.print("Enter duration in years: ");
                                            int mDur = Integer.parseInt(scanner.nextLine().trim());
                                            Loan2 medLoan = new MedicalLoan(mName, mAmt, mDur);
                                            System.out.println("\nMedical Loan Details:");
                                            medLoan.displayLoanDetails();

                                        } else if (choice == 2) {
                                            System.out.print("Enter borrower name: ");
                                            String bName = scanner.nextLine().trim();
                                            System.out.print("Enter loan amount: ");
                                            double bAmt = Double.parseDouble(scanner.nextLine().trim());
                                            System.out.print("Enter duration in years: ");
                                            int bDur = Integer.parseInt(scanner.nextLine().trim());
                                            Loan2 busLoan = new BusinessLoan(bName, bAmt, bDur);
                                            System.out.println("\nBusiness Loan Details:");
                                            busLoan.displayLoanDetails();

                                        } else if (choice == 3) {
                                            insideMedorBusinessLoan = false;
                                            insideloans=false;
                                            System.out.println("You will be returning to the main menu");

                                        } else {
                                            System.out.println("Invalid choice. Please try again.");
                                        }



                                        }
                                        scanner.close();

                                    }
                                }


                            }else if (MenuOptions.equals("8")) {
                                Scanner scanner = new Scanner(System.in);
                                    String ExisitinguniqueID=existingUniqueID(String.valueOf(user.getUniqID()));
                                    System.out.println(ExisitinguniqueID);
                                    if (ExisitinguniqueID.equals("does not exists")){
                                        AddUniqueIDtobox(String.valueOf(user.getUniqID()));
                                    }


                                    SafetyDepositBox.AddUsers(user.getFirstname(),user.getLastname(),user.getPassword(),user.getDob(),String.valueOf(user.getSsn()) ,String.valueOf(user.getUniqID()));
                                    SafetyDepositBox.AddUsers("Manav", "Shah", "123", "12182008", "123456789", "123456");
                                    SafetyDepositBox.AddUsers("Jane", "Doe", "abc", "01011990", "987654321", "654321");
                                    while (true) {
                                        System.out.println("\n=== Safety Deposit Box System ===");
                                        System.out.println("1. Login");
                                        System.out.println("2. Login as an authorized user");
                                        System.out.println("3. Exit");
                                        System.out.print("Choose an option: ");
                                        int choice = -1;
                                        try {
                                            choice = Integer.parseInt(scanner.nextLine());
                                        } catch (NumberFormatException e) {
                                            System.out.println("Invalid input. Please enter a number.");
                                            continue;
                                        }

                                        if (choice == 1) {
                                            String uniqueId = SafetyDepositBox.login(scanner);
                                            if (uniqueId != null) {
                                                SafetyDepositBox.ownerMenu(scanner, uniqueId);
                                            }
                                        } else if (choice == 2) {
                                            SafetyDepositBox.loginAsAuthorizedUser (scanner);
                                        } else if (choice == 3) {
                                            System.out.println("Exiting system.");
                                            break;
                                        } else {
                                            System.out.println("Invalid choice. Try again.");
                                        }
                                    }
                                    scanner.close();








                            }else if (MenuOptions.equals("9")) {
                                Boolean insideuserinfo=true;
                                String newSSNinput = "";
                                while (insideuserinfo) {
                                        System.out.println("Please Pick an Option to Change:");
                                        System.out.println("[1] Change Username");
                                        System.out.println("[2] Change Password");
                                        System.out.println("[3] Change First Name");
                                        System.out.println("[4] Change Last Name");
                                        System.out.println("[5] Change Social Security Number");
                                        System.out.println("[6] Change Email");
                                        System.out.println("[7] Change Phone Number");
                                        System.out.println("[8] Exit");

                                        String changeOption = inputScanner.nextLine();

                                        if (changeOption.equalsIgnoreCase("1")) {
                                            System.out.print("What would you like your new username to be? ");
                                            String newUsername = inputScanner.nextLine();
                                            String userExists = existinguser(newUsername);

                                            while (newUsername == null || newUsername.isEmpty() || userExists.equals("already exists")) {
                                                if (userExists.equals("already exists")) {
                                                    System.out.print("Username is already taken. Please enter a different Username: ");
                                                } else {
                                                    System.out.print("Username cannot be empty. Please enter your Username: ");
                                                }
                                                newUsername = inputScanner.nextLine();
                                                userExists = existinguser(newUsername);
                                            }

                                            String oldUsername = user.getUsername();
                                            AppendCSV(oldUsername, 0, newUsername, user.getUniqID());
                                            user.setUsername(newUsername);

                                        } else if (changeOption.equalsIgnoreCase("2")) {
                                            System.out.print("What would you like your new password to be? ");
                                            String newPassword = inputScanner.nextLine();

                                            while (newPassword == null || newPassword.isEmpty()) {
                                                System.out.print("Password cannot be empty. Please enter your Password: ");
                                                newPassword = inputScanner.nextLine();
                                            }

                                            String oldPassword = user.getPassword();
                                            AppendCSV(oldPassword, 1, newPassword, user.getUniqID());
                                            user.setPassword(newPassword);

                                        } else if (changeOption.equalsIgnoreCase("3")) {
                                            System.out.print("What would you like your new first name to be? ");
                                            String newFirstName = inputScanner.nextLine();

                                            while (newFirstName == null || newFirstName.isEmpty()) {
                                                System.out.print("First name cannot be empty. Please enter your First Name: ");
                                                newFirstName = inputScanner.nextLine();
                                            }

                                            String oldFirstName = user.getFirstname();
                                            AppendCSV(oldFirstName, 2, newFirstName, user.getUniqID());
                                            user.setFirstname(newFirstName);

                                        } else if (changeOption.equalsIgnoreCase("4")) {
                                            System.out.print("What would you like your new last name to be? ");
                                            String newLastName = inputScanner.nextLine();

                                            while (newLastName == null || newLastName.isEmpty()) {
                                                System.out.print("Last name cannot be empty. Please enter your Last Name: ");
                                                newLastName = inputScanner.nextLine();
                                            }

                                            String oldLastName = user.getLastname();
                                            AppendCSV(oldLastName, 3, newLastName, user.getUniqID());
                                            user.setLastname(newLastName);

                                        } else if (changeOption.equalsIgnoreCase("5")) {
                                            System.out.print("Enter your new Social Security Number (9 digits, no dashes): ");
                                             newSSNinput = inputScanner.nextLine();

                                            while (newSSNinput == null || !newSSNinput.matches("\\d{9}") || newSSNinput.isEmpty()) {
                                                System.out.print("Invalid SSN. Please enter exactly 9 digits (no dashes): ");
                                                newSSNinput = inputScanner.nextLine();
                                            }

                                            int newSSN = Integer.parseInt(newSSNinput);
                                            int oldSSN = user.getSsn();
                                            AppendCSV(String.valueOf(oldSSN), 4, newSSNinput, user.getUniqID());
                                            user.setSsn(newSSN);

                                        } else if (changeOption.equalsIgnoreCase("6")) {
                                            System.out.print("Please enter your new email address: ");
                                            String newEmail = inputScanner.nextLine();

                                            while (newEmail == null || newEmail.isEmpty() || !newEmail.contains("@")) {
                                                System.out.print("Invalid email. Email must contain '@'. Please enter your Email: ");
                                                newEmail = inputScanner.nextLine();
                                            }

                                            String oldEmail = user.getEmail();
                                            AppendCSV(oldEmail, 6, newEmail, user.getUniqID());
                                            user.setEmail(newEmail);

                                        } else if (changeOption.equalsIgnoreCase("7")) {
                                            System.out.print("Please enter your new phone number (10 digits): ");
                                            String newPhone = inputScanner.nextLine();

                                            while (newPhone == null || newPhone.isEmpty() || !newPhone.matches("\\d{10}")) {
                                                System.out.print("Invalid phone number. Please enter exactly 10 digits: ");
                                                newPhone = inputScanner.nextLine();
                                            }

                                            String oldPhone = String.valueOf(user.getPhone());
                                            AppendCSV(oldPhone, 7, newPhone, user.getUniqID());
                                            user.setPhone(Long.parseLong(newPhone)); // Assuming your phone field is `long`

                                        } else if (changeOption.equalsIgnoreCase("8")) {
                                            insideuserinfo = false;
                                        }
                                    }







                            }else if (MenuOptions.equals("10")) {
                            exit=true;
                            System.out.println("BYE!");

                        }else{
                            System.out.println("Invalid option. Please enter a valid option");
                        }


            }


        }
    }

     private static String generateVisaCardNumber() {
        Random random = new Random();
        StringBuilder cardNumber = new StringBuilder("4");
        for (int i = 1; i < 16; i++) {
            cardNumber.append(random.nextInt(10));
        }
        return cardNumber.toString();
    }
    private static void writeCardInfoToCSV(String firstName, String lastName, String cardType, String cardNumber, String cvc, String expirationDate, String cardPin, String accountPin) {
        try (PrintWriter writer = new PrintWriter(new FileWriter("src/card_info.csv", true))) {
            writer.println(firstName + "," + lastName + "," + cardType + "," + cardNumber + "," + cvc + "," + expirationDate + "," + cardPin + "," + accountPin);
            System.out.println("Card information written to card_info.csv");
        } catch (IOException e) {
            System.out.println("Error writing to CSV file: " + e.getMessage());
        }
    }

    // Revised genid() method to generate a 6-digit ID as an integer
    static int genid() {
        StringBuilder id = new StringBuilder(); // Used chatgpt to figure this out I didn't know that you can't append ints
        Random rand = new Random();
        for (int i = 0; i < 6; i++) {
            int randnum = rand.nextInt(10); // Generates numbers between 0 and 9
            id.append(randnum);
        }
        return Integer.parseInt(id.toString()); // Converts the generated string to an integer
    }
    public static String existinguser(String username) throws FileNotFoundException { //to make sure two users cannot have the same username when signing up or changing username
        Scanner csvreader = new Scanner(new File("src/UserData.csv"));
        boolean userexists = false;
        while (csvreader.hasNextLine()) {
            String line = csvreader.nextLine().trim();
            if (!line.isEmpty()) {  // Skip empty lines
                String[] UserDatacopier = line.split(",");
                if (UserDatacopier[0].equals(username)) {
                    userexists = true;
                    break;
                }else{
                    userexists = false;
                }
            }
        }
        if (userexists) {
            return "already exists";
        }else{
            return "does not exists";
        }

    }

    public static String checkingacctexists(String uniqueid) throws FileNotFoundException { //to make sure two users cannot have the same username when signing up or changing username
        Scanner csvreader = new Scanner(new File("src/checkingaccount.csv"));
        boolean userexists = false;
        while (csvreader.hasNextLine()) {
            String line = csvreader.nextLine().trim();
            if (!line.isEmpty()) {  // Skip empty lines
                String[] UserDatacopier = line.split(",");
                if (UserDatacopier[0].equals(uniqueid)) {
                    userexists = true;
                    break;
                }else{
                    userexists = false;
                }
            }
        }
        if (userexists) {
            return "already exists";
        }else{
            return "does not exists";
        }

    }

    public static String savingsacctexists(String uniqueid) throws FileNotFoundException { //to make sure two users cannot have the same username when signing up or changing username
        Scanner csvreader = new Scanner(new File("src/savingsaccount.csv"));
        boolean userexists = false;
        while (csvreader.hasNextLine()) {
            String line = csvreader.nextLine().trim();
            if (!line.isEmpty()) {  // Skip empty lines
                String[] UserDatacopier = line.split(",");
                if (UserDatacopier[0].equals(uniqueid)) {
                    userexists = true;
                    break;
                }else{
                    userexists = false;
                }
            }
        }
        if (userexists) {
            return "already exists";
        }else{
            return "does not exists";
        }

    }
    public static void addUserstoCD(int UniqueID, double termLength, double amount, double interest ) throws FileNotFoundException {
        // Scanner to read existing CSV
        Scanner csvreader = new Scanner(new File("src/CD.csv"));
        File tempFile = new File("src/temp.csv"); // I originally had this as a file manually added in the beginning but I realized it would be better to create this in the method and delete the UserData that we had before
        // PrintWriter to write to temp.csv
        PrintWriter out = new PrintWriter(new File("src/temp.csv"));

        // Copy existing data from UserData.csv to temp.csv
        while (csvreader.hasNextLine()) {
            String line = csvreader.nextLine().trim();
            String[] UserDatacopier = line.split(",");

            for (int i = 0; i < UserDatacopier.length; i++) {
                UserDatacopier[i] = UserDatacopier[i].trim();
            }

            // Write the formatted data back to temp.csv
            out.println(String.join(",", UserDatacopier));
        }

        // From video referenced in the beginning
        out.println(String.join(",", Integer.toString(UniqueID),  Double.toString(termLength), Double.toString(amount), Double.toString(interest)));

        // Close resources since they wont be used unless the method is called
        csvreader.close();
        out.close();
        File userDataFile = new File("src/CD.csv");
        userDataFile.delete();
        tempFile.renameTo(new File("src/CD.csv"));
    }

    // to add new user data
    public static void addUser(String username, String password, String firstname, String lastname, int ssn, String dob, String email, long phone, double minimumdeposit,String DefaultBank ,int ID) throws FileNotFoundException {
        // Scanner to read existing CSV
        Scanner csvreader = new Scanner(new File("src/UserData.csv"));
        File tempFile = new File("src/temp.csv"); // I originally had this as a file manually added in the beginning but I realized it would be better to create this in the method and delete the UserData that we had before
        // PrintWriter to write to temp.csv
        PrintWriter out = new PrintWriter(new File("src/temp.csv"));

        // Copy existing data from UserData.csv to temp.csv
        while (csvreader.hasNextLine()) {
            String line = csvreader.nextLine().trim();
            String[] UserDatacopier = line.split(",");

            for (int i = 0; i < UserDatacopier.length; i++) {
                UserDatacopier[i] = UserDatacopier[i].trim();
            }

            // Write the formatted data back to temp.csv
            out.println(String.join(",", UserDatacopier));
        }

        // From video referenced in the beginning, now including the unique ID as the 10th field
        out.println(String.join(",", username, password, firstname, lastname, Integer.toString(ssn), dob, email, Long.toString(phone), Double.toString(minimumdeposit),DefaultBank, Integer.toString(ID)));

        // Close resources since they wont be used unless the method is called
        csvreader.close();
        out.close();
        File userDataFile = new File("src/UserData.csv");
        userDataFile.delete();
        tempFile.renameTo(new File("src/UserData.csv"));
    }

    // to replace user data
    public static void AppendCSV(String Keyword, int Index, String replacement,int UniqID) throws FileNotFoundException {
        Scanner csvreader = new Scanner(new File("src/UserData.csv"));
        String UniqueID = Integer.toString(UniqID);
        File tempFile = new File("src/temp.csv");
        PrintWriter out = new PrintWriter(tempFile);

        // Copy existing data from UserData.csv to temp.csv
        while (csvreader.hasNextLine()) {
            String line = csvreader.nextLine().trim();
            if (!line.isEmpty()) {  // Skip empty lines
                String[] UserDatacopier = line.split(",");

                // Trim each column value
                for (int i = 0; i < UserDatacopier.length; i++) {
                    UserDatacopier[i] = UserDatacopier[i].trim();
                    if (UserDatacopier[Index].equals(Keyword) && UserDatacopier[10].equals(UniqueID)) { // Replace the old at the index if it matches the keyword
                        UserDatacopier[Index] = replacement;
                    }
                }

                out.println(String.join(",", UserDatacopier)); // Write to the new file

            }
        }

        // Close resources
        csvreader.close();
        out.close();

        File originalFile = new File("src/UserData.csv");
        originalFile.delete(); // Delete the original file
        tempFile.renameTo(new File("src/UserData.csv")); // Rename the temporary file
    }

    // this returns the user info based on the input username
    public static UserData users(String username) throws FileNotFoundException {
        Scanner scanner = new Scanner(new File("src/UserData.csv"));
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] userArray = line.split(",");
            if (userArray[0].equals(username)) {
                // Parse the user data to create a UserData object
                return new UserData(userArray[0], userArray[1], userArray[2], userArray[3],
                        Integer.parseInt(userArray[4]), userArray[5], userArray[6], Long.parseLong(userArray[7]),
                        Double.parseDouble(userArray[8]),userArray[9] ,Integer.parseInt(userArray[10]));
            }
        }
        return null; // return null if the user is not found
    }
    //Aasmaa's methods
    public static void processLoans(String csvFile) {
        String line;
        String splitBy = ",";

        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
            while ((line = br.readLine()) != null) {
                processLoanLine(line, splitBy);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void processLoanLine(String line, String splitBy) {
        String[] data = line.split(splitBy);
        String loanType = data[0].trim();
        String borrowerName = data[1].trim();
        double loanAmount = Double.parseDouble(data[2].trim());
        int duration = Integer.parseInt(data[3].trim());

        Loan2 loan;
        switch (loanType.toLowerCase()) {
            case "medical":
                loan = new MedicalLoan(borrowerName, loanAmount, duration);
                break;
            case "business":
                loan = new BusinessLoan(borrowerName, loanAmount, duration);
                break;
            default:
                System.out.println("Invalid loan type: " + loanType);
                return;
        }

        loan.displayLoanDetails();
        System.out.println("-----------");
    }



    //MJ OSTAP AND AARON

     private static SavingsAccount createNewAccounts(Scanner scan, String userID) {
        System.out.print("Enter account holder's name: ");
        String name = scan.nextLine().trim();

        double overdraftLimit = 200.00;
        boolean overdraftProtection = false;

        while (true) {
            System.out.print("Do you want overdraft protection? (true/false): ");
            String input = scan.nextLine().trim().toLowerCase();
            if (input.equals("true")) {
                System.out.print("Enter existing checking account number: ");
                String checkingAccNum = scan.nextLine().trim();
                CheckingAccount linked = CheckingAccount.loadByAccountNumber(checkingAccNum);

                if (linked != null && linked.getUniqueID().equals(userID)) {
                    overdraftProtection = true;
                    System.out.println("Overdraft protection enabled using Checking Account.");
                } else {
                    System.out.println("Invalid checking account number. Overdraft protection not enabled.");
                }
                break;
            } else if (input.equals("false")) {
                overdraftProtection = false;
                break;
            } else {
                System.out.println("Invalid input. Please enter 'true' or 'false'.");
            }
        }

        SavingsAccount newAccount = new SavingsAccount(userID, name, 0.00, overdraftProtection, overdraftLimit);
        newAccount.saveToCSV(); // Save the new account to the CSV
        return newAccount;
    }
    private static void deleteAccount(SavingsAccount account) {
        if (account == null) return;

        File file = new File(System.getProperty("user.dir") + "/savingsaccount.csv");
        List<String> lines = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            String header = br.readLine();
            lines.add(header);
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (!parts[1].equals(account.getAccountNumber())) {
                    lines.add(line);
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading file during deletion.");
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            for (String l : lines) {
                bw.write(l);
                bw.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error writing file during deletion.");
        }
    }

    public static String existingUniqueID(String UniqueID) throws FileNotFoundException { //to make sure two users cannot have the same username when signing up or changing username
        Scanner csvreader = new Scanner(new File("src/BankDepositBox.csv"));
        boolean userexists = false;
        while (csvreader.hasNextLine()) {
            String line = csvreader.nextLine().trim();
            if (!line.isEmpty()) {  // Skip empty lines
                String[] UserDatacopier = line.split(",");
                if (UserDatacopier[10].equals(UniqueID)) {
                    userexists = true;
                    break;
                }else{
                    userexists = false;
                }
            }
        }
        if (userexists) {
            return "already exists";
        }else{
            return "does not exists";
        }



    }
    //For Safety Deposit box
    public static void AddUniqueIDtobox(String UniqueID) throws FileNotFoundException {
        // Scanner to read existing CSV
        Scanner csvreader = new Scanner(new File("src/BankDepositBox.csv"));
        File tempFile = new File("src/temp.csv"); // I originally had this as a file manually added in the beginning but I realized it would be better to create this in the method and delete the UserData that we had before
        // PrintWriter to write to temp.csv
        PrintWriter out = new PrintWriter(new File("src/temp.csv"));

        // Copy existing data from UserData.csv to temp.csv
        while (csvreader.hasNextLine()) {
            String line = csvreader.nextLine().trim();
            String[] UserDatacopier = line.split(",");

            for (int i = 0; i < UserDatacopier.length; i++) {
                UserDatacopier[i] = UserDatacopier[i].trim();
            }

            // Write the formatted data back to temp.csv
            out.println(String.join(",", UserDatacopier));
        }

        // From video referenced in the beginning
        out.println(String.join(",", "", "", "", "", "", "", "", "", "", "", UniqueID, ""));

        // Close resources since they wont be used unless the method is called
        csvreader.close();
        out.close();
        File userDataFile = new File("src/BankDepositBox.csv");
        userDataFile.delete();
        tempFile.renameTo(new File("src/BankDepositBox.csv"));
    }




     private static CheckingAccount createNewAccount(Scanner scan, String userID) {
        System.out.print("Enter account holder's name: ");
        String name = scan.nextLine().trim();

        double overdraftLimit = 200.00;
        boolean overdraftProtection = false;

        while (true) {
            System.out.print("Do you want overdraft protection? (true/false): ");
            String input = scan.nextLine().trim().toLowerCase();
            if (input.equals("true")) {
                System.out.print("Enter existing checking account number: ");
                String checkingAccNum = scan.nextLine().trim();
                CheckingAccount linked = CheckingAccount.loadByAccountNumber(checkingAccNum);

                if (linked != null && linked.getUniqueID().equals(userID)) {
                    overdraftProtection = true;
                    System.out.println("Overdraft protection enabled using Checking Account.");
                } else {
                    System.out.println("Invalid checking account number. Overdraft protection not enabled.");
                }
                break;
            } else if (input.equals("false")) {
                overdraftProtection = false;
                break;
            } else {
                System.out.println("Invalid input. Please enter 'true' or 'false'.");
            }
        }

        CheckingAccount newAccount = new CheckingAccount(userID, name, 0.00, overdraftProtection, overdraftLimit);
        newAccount.saveToCSV(); // Save the new account to the CSV
        return newAccount;
    }

    private static void deleteAccount(CheckingAccount account) {
        if (account == null) return;

        File file = new File(System.getProperty("user.dir") + "src/checkingaccount.csv");
        List<String> lines = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            String header = br.readLine();
            lines.add(header);
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (!parts[1].equals(account.getAccountNumber())) {
                    lines.add(line);
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading file during deletion.");
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
            for (String l : lines) {
                bw.write(l);
                bw.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error writing file during deletion.");
        }
    }


    private static int getValidInput(Scanner scan, int min, int max) {
        while (true) {
            if (scan.hasNextInt()) {
                int choice = scan.nextInt();
                scan.nextLine();
                if (choice >= min && choice <= max) {
                    return choice;
                }
            } else {
                scan.nextLine();
            }
            System.out.print("Invalid input. Please enter a number between " + min + " and " + max + ": ");
        }
    }

    private static double getValidDouble(Scanner scan) {
        while (true) {
            if (scan.hasNextDouble()) {
                double val = scan.nextDouble();
                scan.nextLine();
                return val;
            } else {
                scan.nextLine();
            }
            System.out.print("Invalid input. Please enter a valid number: ");
        }
    }

    private static void displayAccountInfo(SavingsAccount account) {
        if (account != null) { // Check for null account
            System.out.println("Account Number: " + account.getAccountNumber());
            System.out.println("Date Opened: " + account.getDateOpened());
            System.out.println("Last Transaction Date: " + account.getLastTransactionDate());
            System.out.println("Balance: $" + account.getBalance());
            System.out.println("Overdraft Protection: " + account.isOverdraftProtectionEnabled());
            System.out.println("Overdraft Limit: $" + account.getOverdraftLimit());
            System.out.println("Overdraft Fee: $" + account.getOverdraftFee());
        } else {
            System.out.println("Account information could not be displayed. Account is not initialized.");
        }
    }

    private static void displayAccountInfo(CheckingAccount account) {
        if (account != null) { // Check for null account
            System.out.println("Account Number: " + account.getAccountNumber());
            System.out.println("Date Opened: " + account.getDateOpened());
            System.out.println("Last Transaction Date: " + account.getLastTransactionDate());
            System.out.println("Balance: $" + account.getBalance());
            System.out.println("Overdraft Protection: " + account.isOverdraftProtectionEnabled());
            System.out.println("Overdraft Limit: $" + account.getOverdraftLimit());
            System.out.println("Overdraft Fee: $" + account.getOverdraftFee());
        } else {
            System.out.println("Account information could not be displayed. Account is not initialized.");
        }
    }

    // Rohan and WILL
    public static void setBalance(double newBalance, String uniqueID) {
        List<String> lines = new ArrayList<>();
        boolean found = false;

// Read the CSV and find the row to update
        try (Scanner csv = new Scanner(new File("account_info.csv"))) {
            while (csv.hasNextLine()) {
                String line = csv.nextLine();
                String[] fields = line.split(",");
                if (fields.length >= 1 && fields[0].equals(uniqueID)) {
// Found the row to update, replace the balance field
                    found = true;
                    fields[3] = String.format("%.2f", newBalance);
                    line = String.join(",", fields);
                }
                lines.add(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV: " + e.getMessage());
        }

// If the account was found and balance was updated, rewrite the CSV
        if (found) {
            try (PrintWriter writer = new PrintWriter(new FileWriter("account_info.csv"))) {
                for (String line : lines) {
                    writer.println(line);
                }
            } catch (IOException e) {
                System.out.println("Error writing CSV: " + e.getMessage());
            }
            System.out.println("Balance updated successfully.");
        } else {
            System.out.println("Account not found with the given unique ID.");
        }
    }
    private static void viewAccountInfo(Scanner sc) {
        System.out.print("Enter account holder's name: ");
        String holderName = sc.nextLine().trim();

        System.out.print("Enter your 4-digit PIN: ");
        String enteredPin = sc.nextLine().trim();

// read CSV file containing account info
        try (Scanner csv = new Scanner(new File("src/account_info.csv"))) {
            boolean found = false;

            while (csv.hasNextLine()) {
                String[] f = csv.nextLine().split(",");

                if (f.length < 9) continue;

                String accountHolder = f[2].trim();
                String storedPin = f[8].trim();

// If info matches, display account info
                if (accountHolder.equalsIgnoreCase(holderName)) {
                    if (storedPin.equals(enteredPin)) {
                        found = true;
                        System.out.println("\nAccount Holder: " + f[2]);
                        System.out.println("Account Number: " + f[1]);
                        System.out.println("Balance: " + String.format("%.2f", Double.parseDouble(f[3])));
                        System.out.println("PIN: " + f[8]);
                        break;
                    } else {
                        System.out.println("Incorrect PIN.");
                        return;
                    }
                }
            }

// If no matching account
            if (!found) {
                System.out.println("No matching account found.");
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV: " + e.getMessage());
        }

        waitForBack(sc);
    }

// new account
    private static void createNewAccount(Scanner sc,int uniqID) throws FileNotFoundException {
        System.out.println("Provide the following information to create a new account:");


        System.out.print("Account holder name: ");
        String holderName = sc.nextLine();


        String accountNumber = "4" + String.format("%015d", (long) (Math.random() * 1_000_000_000_000_000L));

        double balance = 0.0;
        boolean overdraftProtection = false;
        double overdraftLimit = 0.0;
        String dateOpened = java.time.LocalDate.now().toString();
        String lastTransactionDate = "None";


        String cvv = String.format("%03d", (int) (Math.random() * 1000));
        String expiryDate = java.time.LocalDate.now().plusYears(5).format(java.time.format.DateTimeFormatter.ofPattern("MM/yy"));
        String fourDigitCode = String.format("%04d", (int) (Math.random() * 10000));

// user set pin
        System.out.print("Set your 4-digit Account Security PIN: ");
        String pin = sc.nextLine();

 // Write new account to CSV

        writeAccountInfoToCSV(uniqID, accountNumber, holderName, balance, overdraftProtection, overdraftLimit, dateOpened, lastTransactionDate, pin);

        // Display the newly created account's card details
        System.out.println("\nYour new card details:");
        System.out.println("Account Number: " + accountNumber);
        System.out.println("CVV: " + cvv);
        System.out.println("Expiry Date: " + expiryDate);
        System.out.println("4-Digit Code: " + fourDigitCode);


        waitForBack(sc);
    }

    private static void closeAccount(Scanner sc) {
        // Prompt for account holder's name and PIN
        System.out.print("Enter account holder's name: ");
        String holderName = sc.nextLine().trim();
        System.out.print("Enter your 4-digit PIN: ");
        String enteredPin = sc.nextLine().trim();

        List<String> keep = new ArrayList<>();
        boolean removed = false;

// Read CSV and removes value
        try (Scanner csv = new Scanner(new File("src/account_info.csv"))) {
            while (csv.hasNextLine()) {
                String line = csv.nextLine();
                String[] f = line.split(",");
                if (f.length < 9) continue;

                String accountHolder = f[2].trim();
                String storedPin = f[8].trim();

// If info matches mark for removal
                if (accountHolder.equalsIgnoreCase(holderName) && storedPin.equals(enteredPin)) {
                    removed = true;
                } else {
                    keep.add(line);
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV: " + e.getMessage());
        }

// If account was found and removed
        if (!removed) {
            System.out.println("No matching account found or incorrect PIN.");
        } else {
            try (PrintWriter w = new PrintWriter(new FileWriter("src/account_info.csv"))) {
                for (String line : keep) w.println(line);
            } catch (IOException e) {
                System.out.println("Error writing CSV: " + e.getMessage());
            }
            System.out.println("Account closed successfully.");
        }


        waitForBack(sc);
    }

//write the new account info to CSV
    private static void writeAccountInfoToCSV(int id, String accountNumber, String holderName, double balance,
                                               boolean overdraftProtection, double overdraftLimit, String dateOpened,
                                               String lastTransactionDate, String pin) {
        try (PrintWriter w = new PrintWriter(new FileWriter("src/account_info.csv", true))) {
// Write account data in CSV format
            w.println(id + "," + accountNumber + "," + holderName + "," + balance + "," +
                      overdraftProtection + "," + overdraftLimit + "," + dateOpened + "," + lastTransactionDate + "," + pin);
        } catch (IOException e) {
            System.out.println("Error writing CSV: " + e.getMessage());
        }
    }

// "back" to return to main menu
    private static String waitForBack(Scanner sc) {
        System.out.println("\nType 'back' to return to the previous menu ");
    while (true) {
        String input = sc.nextLine().trim().toLowerCase();
        if (input.equals("back")) {
            return "back";
        }
        System.out.print("Invalid input. Please type 'back' or 'main': ");
    }
    }

// Ensure that the account_info.csv file exists
    private static void ensureFile(String name) {
        try {
            File f = new File(name);
            if (!f.exists()) f.createNewFile();
        } catch (IOException e) {
            System.out.println("Error ensuring file existence: " + e.getMessage());
        }
    }
    // Sign in - name and pin
    private static void signIn(Scanner sc) {
        System.out.print("Enter account holder's name: ");
        String holderName = sc.nextLine().trim();

        System.out.print("Enter your 4-digit PIN: ");
        String enteredPin = sc.nextLine().trim();

        // Authenticate the user and proceed if valid
        if (authenticate(holderName, enteredPin)) {
            System.out.println("Sign in successful!");
            handleAccountActions(sc, holderName);  // Handles account actions after successful sign-in
        } else {
            System.out.println("Invalid account or PIN. Please try again.");
        }
    }

// check CSV for matching name and pin
    private static boolean authenticate(String holderName, String enteredPin) {
        try (Scanner csv = new Scanner(new File("src/account_info.csv"))) {
            while (csv.hasNextLine()) {
                String[] f = csv.nextLine().split(",");
                if (f.length < 9) continue;
                String accountHolder = f[2].trim();
                String storedPin = f[8].trim();

// Check if account name and pin match
                if (accountHolder.equalsIgnoreCase(holderName) && storedPin.equals(enteredPin)) {
                    return true;  // Authentication successful
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV: " + e.getMessage());
        }
        return false;  // Authentication failed
    }

// view balance, deposit, withdraw
    private static void handleAccountActions(Scanner sc, String holderName) {
        while (true) {
            System.out.println("\nChoose an option:");
            System.out.println("1. View Balance");
            System.out.println("2. Deposit Funds");
            System.out.println("3. Withdraw Funds");
            System.out.println("4. Back to Main Menu");
            String option = sc.nextLine().trim();

            switch (option) {
                case "1" -> viewBalance(holderName);  // Show account balance
                case "2" -> depositFunds(sc, holderName);  // Deposit funds
                case "3" -> withdrawFunds(sc, holderName);  // Withdraw funds
                case "4" -> {
                    System.out.println("\nReturning to the main menu...");
                    return;  // Exit to the main menu
                }
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }

// View account balance
    private static void viewBalance(String holderName) {
        try (Scanner csv = new Scanner(new File("src/account_info.csv"))) {
            while (csv.hasNextLine()) {
                String[] f = csv.nextLine().split(",");
                if (f.length < 9) continue;

                String accountHolder = f[2].trim();
                if (accountHolder.equalsIgnoreCase(holderName)) {
                    double balance = Double.parseDouble(f[3].trim());
                    System.out.printf("\nYour Balance: $%.2f\n", balance);  // Display balance with 2 decimal places
                    return;
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV: " + e.getMessage());
        }
        System.out.println("No matching account found.");
    }

// Deposit and conversion
    private static void depositFunds(Scanner sc, String holderName) {
        System.out.println("\nSelect currency for deposit:");
        System.out.println("1. USD");
        System.out.println("2. Euro (â‚¬)");
        System.out.println("3. Peso (â‚±)");
        System.out.println("4. Canadian Dollar (CAD$)");

        String currencyOption = sc.nextLine().trim();
        double exchangeRate = 1.0;  // Default to USD (1 USD = 1 USD)

// exchange rate
        switch (currencyOption) {
            case "1" -> System.out.print("Enter amount in USD: ");
            case "2" -> {
                exchangeRate = 1.1;  // Example rate for Euro to USD
                System.out.print("Enter amount in Euro (â‚¬): ");
            }
            case "3" -> {
                exchangeRate = 0.018;  // Example rate for Peso to USD
                System.out.print("Enter amount in Peso (â‚±): ");
            }
            case "4" -> {
                exchangeRate = 0.74;  // Example rate for CAD to USD
                System.out.print("Enter amount in Canadian Dollar (CAD$): ");
            }
            default -> {
                System.out.println("Invalid currency option.");
                return;
            }
        }

// Convert amount to USD and update balance
        double amount = Double.parseDouble(sc.nextLine().trim());
        double depositAmountInUSD = amount * exchangeRate;

        updateBalance(holderName, depositAmountInUSD);  // Update the account balance

        System.out.printf("Successfully deposited $%.2f in USD.\n", depositAmountInUSD);
    }

// Update balance after deposit-withdrawal
    private static void updateBalance(String holderName, double amount) {
        List<String> keep = new ArrayList<>();
        boolean updated = false;

        try (Scanner csv = new Scanner(new File("src/account_info.csv"))) {
            while (csv.hasNextLine()) {
                String line = csv.nextLine();
                String[] f = line.split(",");
                if (f.length < 9) continue;

                String accountHolder = f[2].trim();
                if (accountHolder.equalsIgnoreCase(holderName)) {
                    double balance = Double.parseDouble(f[3].trim());
                    balance += amount;  // Add deposit or subtract withdrawal
                    f[3] = String.format("%.2f", balance);  // Update balance in the array
                    updated = true;
                }
                keep.add(String.join(",", f));
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV: " + e.getMessage());
        }

// Write updated balance back to the file
        if (updated) {
            try (PrintWriter writer = new PrintWriter(new FileWriter("src/account_info.csv"))) {
                for (String line : keep) {
                    writer.println(line);
                }
            } catch (IOException e) {
                System.out.println("Error writing CSV: " + e.getMessage());
            }
        }
    }

// Withdraw funds
    private static void withdrawFunds(Scanner sc, String holderName) {
        System.out.print("Enter withdrawal amount in USD: ");
        double amount = Double.parseDouble(sc.nextLine().trim());

        try (Scanner csv = new Scanner(new File("src/account_info.csv"))) {
            List<String> keep = new ArrayList<>();
            boolean found = false;

// Check balance is sufficient for withdrawal
            while (csv.hasNextLine()) {
                String line = csv.nextLine();
                String[] f = line.split(",");
                if (f.length < 9) continue;

                String accountHolder = f[2].trim();
                if (accountHolder.equalsIgnoreCase(holderName)) {
                    double balance = Double.parseDouble(f[3].trim());

// Ensure sufficient funds
                    if (balance >= amount) {
                        balance -= amount;
                        f[3] = String.format("%.2f", balance);  // Update balance after withdrawal
                        found = true;
                    } else {
                        System.out.println("Insufficient funds.");
                    }
                }
                keep.add(String.join(",", f));
            }

// Write updated balance back to the file
            if (found) {
                try (PrintWriter writer = new PrintWriter(new FileWriter("src/account_info.csv"))) {
                    for (String line : keep) {
                        writer.println(line);
                    }
                } catch (IOException e) {
                    System.out.println("Error writing CSV: " + e.getMessage());
                }
                System.out.printf("Successfully withdrawn $%.2f.\n", amount);
            } else {
                System.out.println("No matching account found.");
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV: " + e.getMessage());
        }
    }


}

class UserData {
    private String username;
    private String password;
    private String firstname;
    private String lastname;
    private int ssn;
    private String dob;
    private String email;
    private long phone;
    private double minimumdeposit;
    private String DefaultBank;
    private int uniqID;

    UserData() {
        this.username = "";
        this.password = "";
        this.firstname = "";
        this.lastname = "";
        this.ssn = 0;
        this.dob = "";
        this.email = "";
        this.phone = 0;
        this.minimumdeposit = 0;
        this.DefaultBank = "";
        this.uniqID = 0;
    }

    UserData(String username, String password, String firstname, String lastname, int ssn, String dob, String email, long phone, double minimumdeposit,String DefaultBank ,int uniqID) {
        this.username = username;
        this.password = password;
        this.firstname = firstname;
        this.lastname = lastname;
        this.ssn = ssn;
        this.dob = dob;
        this.email = email;
        this.phone = phone;
        this.DefaultBank = DefaultBank;
        this.uniqID = uniqID;

    }
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public String getFirstname() {
        return firstname;
    }
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }
    public String getLastname() {
        return lastname;
    }
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }
    public int getSsn() {
        return ssn;
    }
    public void setSsn(int ssn) {
        this.ssn = ssn;
    }
    public String getDob() {
        return dob;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public long getPhone() {
        return phone;
    }
    public void setPhone(long phone) {
        this.phone = phone;
    }
    public double getMinimumdeposit() {
        return minimumdeposit;
    }
    public void setMinimumdeposit(double minimumdeposit) {
        this.minimumdeposit = minimumdeposit;
    }
    public int getUniqID() {
        return uniqID;
    }
    public void setDob(String dob) {
        this.dob = dob;
    }
    public void setID(int uniqID) {
        this.uniqID = uniqID;
    }
}




//from GABBY AND ANT CREDIT CARD
class CreditCard {

    // Constants
    private static final double MAX_CREDIT_LIMIT = 15000.00;
    private static final double MIN_CREDIT_LIMIT = 500.00;
    private static final double MAX_CREDIT_SCORE = 850;
    private static final double MIN_CREDIT_SCORE = 300;
    private static final double MAX_DTI_RATIO = 36.0;
    private static final double MAX_CREDIT_UTILIZATION = 0.3;

    // Instance variables
    private double creditLimit;
    private double balance;
    private double interestRate;
    private ArrayList<Double> bankStatement;
    private LocalDate billingCycleEnd;
    private long creditCardNumber;
    private long creditCardCVV;
    private String expirationDate;
    private int UniqueID;

    // Constructor
    public CreditCard() {
        bankStatement = new ArrayList<>();
        billingCycleEnd = LocalDate.now().plusMonths(1);
        expirationDate = "03/28"; // Default expiration date
    }
    public void getID(int iD){
        this.UniqueID = iD;
    }



    // Main Menu method with two different paths
    public void mainMenu(Scanner scanner) {
        while (true) {
            try {
                System.out.println("\nWelcome to Credit Card Services:");
                System.out.println("1. Do you have a credit card?");
                System.out.println("2. Do you want to apply for a credit card?");
                System.out.println("3. Exit");

                int mainChoice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (mainChoice) {
                    case 1:
                        existingCardMenu(scanner);
                        break;
                    case 2:
                        newCardMenu(scanner);
                        break;
                    case 3:
                        System.out.println("Exiting program...");
                        return;
                    default:
                        System.out.println("Invalid choice. Please enter a number between 1 and 3.");
                }
            } catch (Exception e) {
                System.out.println("An error occurred: " + e.getMessage());
                scanner.nextLine(); // Clear invalid input
            }
        }
    }

    // Menu for existing credit card holders
    public void existingCardMenu(Scanner scanner) {
        while (true) {
            try {
                System.out.println("\nExisting Credit Card Holder Menu:");
                System.out.println("1. Pay Using Credit Card");
                System.out.println("2. Review Bank Statement");
                System.out.println("3. Pay Bank Statement");
                System.out.println("4. Return to Main Menu");

                int menuChoice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (menuChoice) {
                    case 1:
                        payUsingCredit(scanner);
                        break;
                    case 2:
                        printStatement();
                        break;
                    case 3:
                        payBankStatement(scanner);
                        break;
                    case 4:
                        return;
                    default:
                        System.out.println("Invalid choice. Please enter a number between 1 and 4.");
                }
            } catch (Exception e) {
                System.out.println("An error occurred: " + e.getMessage());
                scanner.nextLine(); // Clear invalid input
            }
        }
    }

    // Menu for new credit card applicants
    public void newCardMenu(Scanner scanner) {
        while (true) {
            try {
                System.out.println("\nNew Credit Card Applicant Menu:");
                System.out.println("1. Apply for Credit");
                System.out.println("2. Return to Main Menu");

                int menuChoice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (menuChoice) {
                    case 1:
                        applyForCredit(scanner);
                        return;
                    case 2:
                        return;
                    default:
                        System.out.println("Invalid choice. Please enter 1 or 2.");
                }
            } catch (Exception e) {
                System.out.println("An error occurred: " + e.getMessage());
                scanner.nextLine(); // Clear invalid input
            }
        }
    }

    // Credit Card Approval method with improved validation
    public void applyForCredit(Scanner scanner) {
        System.out.println("Applying for credit...");

        int creditScore = getCreditScore(scanner);
        double interestRateD = getInterestRate(creditScore);
        double creditURate = getCreditURate(scanner);
        double dti = getDTI(scanner);

        // Generate card details
        creditCardNumber = getCreditCardNumber();
        creditCardCVV = getCreditCardCVV();
        creditLimit = getCreditCardLimit(creditScore);

        // Display and save credit card terms
        creditCardTerms(creditCardNumber, creditCardCVV, expirationDate, interestRateD, creditLimit);
        writeUserDataToCSV("src/creditCardData.csv", creditCardNumber, creditCardCVV, creditLimit, expirationDate, interestRateD);
    }

    // Validate and get credit score
    public int getCreditScore(Scanner scanner) {
        while (true) {
            try {
                System.out.print("Please enter your credit score: ");
                int creditScore = scanner.nextInt();

                if (creditScore < MIN_CREDIT_SCORE || creditScore > MAX_CREDIT_SCORE) {
                    System.out.printf("Credit score must be between %.0f and %.0f. Please try again.\n",
                            MIN_CREDIT_SCORE, MAX_CREDIT_SCORE);
                    continue;
                }

                return creditScore;
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter a valid credit score.");
                scanner.nextLine(); // Clear invalid input
            }
        }
    }

    // Validate Debt-to-Income Ratio
    public double getDTI(Scanner scanner) {
        while (true) {
            try {
                System.out.print("What are your total monthly debt payments? ");
                double monthlyDebt = scanner.nextDouble();

                System.out.print("What is your yearly salary? ");
                double yearlySalary = scanner.nextDouble();

                double dti = (monthlyDebt / (yearlySalary / 12)) * 100;

                if (dti > MAX_DTI_RATIO) {
                    System.out.println("Your debt-to-income ratio is too high to be approved for a credit card.");
                    continue;
                }

                return dti;
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter valid numbers.");
                scanner.nextLine(); // Clear invalid input
            }
        }
    }

    // Validate Credit Utilization Rate
    public double getCreditURate(Scanner scanner) {
        while (true) {
            try {
                System.out.print("Sum of current credit card balances: ");
                double balanceA = scanner.nextDouble();

                System.out.print("Sum of current credit card limits: ");
                double limitA = scanner.nextDouble();

                double creditURate = balanceA / limitA;

                if (creditURate > MAX_CREDIT_UTILIZATION) {
                    System.out.println("Credit utilization rate is too high for approval.");
                    continue;
                }

                return creditURate;
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter valid numbers.");
                scanner.nextLine(); // Clear invalid input
            }
        }
    }

    // Determine Interest Rate Based on Credit Score
    public double getInterestRate(int creditScore) {
        if (creditScore <= 579) return 0.211;
        if (creditScore <= 619) return 0.202;
        if (creditScore <= 659) return 0.191;
        if (creditScore <= 719) return 0.169;
        return 0.127;
    }

    // Generate Random Credit Card Number
    public long getCreditCardNumber() {
        return ThreadLocalRandom.current().nextLong(1_000_000_000_000_000L, 10_000_000_000_000_000L);
    }

    // Generate Random CVV Number
    public long getCreditCardCVV() {
        return ThreadLocalRandom.current().nextLong(100, 1000);
    }

    // Determine Credit Card Limit Based on Credit Score
    public double getCreditCardLimit(int creditScore) {
        if (creditScore > 750) return MAX_CREDIT_LIMIT;
        if (creditScore >= 700) return 7500.00;
        if (creditScore >= 650) return 3500.00;
        if (creditScore >= 600) return 1250.00;
        return MIN_CREDIT_LIMIT;
    }

    // Print Credit Card Terms
    public void creditCardTerms(long creditCardNumber, long creditCardCVV,
                                String expirationDate, double interestRateD, double creditLimit) {
        DecimalFormat df = new DecimalFormat("#0.00");

        System.out.println("\nApproved Credit Card Details:");
        System.out.println("Number: " + creditCardNumber);
        System.out.println("CVV: " + creditCardCVV);
        System.out.println("Expiration Date: " + expirationDate);
        System.out.println("Default Interest Rate: " + interestRateD);
        System.out.println("Credit Card Limit: $" + df.format(creditLimit));
    }

    // Pay Using Credit Card
    public void payUsingCredit(Scanner scanner) {
        System.out.println("Enter credit card number:");
        long cardNumber = scanner.nextLong();

        System.out.println("Enter CVV:");
        long cvv = scanner.nextLong();

        if (!validateCard(cardNumber, cvv)) {
            System.out.println("Invalid credit card number or CVV.");
            return;
        }

        System.out.println("Enter amount to swipe:");
        double swipeAmount = scanner.nextDouble();

        swipe(swipeAmount);
    }

    // Validate Card Against CSV File
    public boolean validateCard(long cardNumber, long cvv) {
        String csvFile = "src/creditCardData.csv";

        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
            String line;
            br.readLine(); // Skip header

            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                long storedCardNumber = Long.parseLong(data[0].trim());
                long storedCVV = Long.parseLong(data[1].trim());

                if (storedCardNumber == cardNumber && storedCVV == cvv) {
                    return true;
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading card data: " + e.getMessage());
        }

        return false;
    }

    // Swipe Transaction
    public void swipe(double swipeAmount) {
        if (balance + swipeAmount > creditLimit) {
            System.out.println("Transaction failed. Credit limit exceeded.");
        } else {
            balance += swipeAmount;
            bankStatement.add(swipeAmount);
            System.out.println("Transaction successful.");
        }
    }

    // Print Bank Statement
    public void printStatement() {
        DecimalFormat df = new DecimalFormat("#0.00");

        System.out.println("Bank Statement:");
        bankStatement.forEach(transaction -> System.out.println("$" + transaction));

        System.out.println("Current amount spent: $" + df.format(balance));

        LocalDate currentDate = LocalDate.now();
        LocalDate lastDayOfMonth = currentDate.withDayOfMonth(currentDate.lengthOfMonth());
        int daysLeft = lastDayOfMonth.getDayOfMonth() - currentDate.getDayOfMonth() + 1;

        System.out.println("Days left in billing cycle: " + daysLeft);
    }

    // Pay Bank Statement
    public void payBankStatement(Scanner scanner) {
        DecimalFormat df = new DecimalFormat("#0.00");

        double totalStatement = getTotalStatement();
        double minimumPayment = totalStatement * 0.05;

        System.out.println("Your minimum payment is: $" + df.format(minimumPayment));
        System.out.println("Enter amount to pay:");

        double payAmount = scanner.nextDouble();

        if (payAmount >= minimumPayment && payAmount <= totalStatement) {
            balance -= payAmount;
            System.out.println("Payment successful. Remaining balance: $" + df.format(balance));
        } else {
            System.out.println("Payment failed. Please pay at least the minimum statement and not more than the total statement.");
        }
    }

    // Calculate Total Statement Amount
    public double getTotalStatement() {
        return bankStatement.stream().mapToDouble(Double::doubleValue).sum();
    }

    // Write User Data to CSV
    public void writeUserDataToCSV(String filename, long creditCardNumber, long creditCardCVV,
                                   double creditLimit, String expirationDate, double interestRateD) {
        String directoryName = "src/creditCardData.csv";
        File directory = new File(directoryName);
        if (!directory.exists()) {
            directory.mkdir();
        }

        String fullPath = directoryName;

        try (FileWriter writer = new FileWriter(fullPath, true)) {
            writer.write("Number,CVV,Credit Limit,Expiration Date,Default Interest Rate\n");
            writer.write(String.format("%d,%d,%.2f,%s,%.3f\n",
                    creditCardNumber, creditCardCVV, creditLimit, expirationDate, interestRateD));
            System.out.println("User data has been written to CSV file.");
        } catch (IOException e) {
            System.out.println("Error writing to CSV: " + e.getMessage());
        }
    }
}






//GABE AND LANDON


class CD {
    double term;
    double Principal;
    double IR;

    // Constructor with parameters
    public CD(double t, double p, double ir) {
        this.term = t;
        this.Principal = p;
        this.IR = ir;
    }

    // Method to calculate maturity amount based on principal, interest rate, and term
    public double calculateMaturityAmount(double principal) {
        return principal * (1 + ((IR) / 100) * (term / 12));
    }

    // Display CD information
    public void displayCD() {
        System.out.println("Term: " + term + " month(s), Principal: $" + Principal + ", Interest Rate: " + IR + "%");
    }

    // Getter methods
    public double getTerm() {
        return this.term;
    }

    public double getIR() {
        return this.IR;
    }
}

class CDinterface {
    private static ArrayList<CD> CDoptions = new ArrayList<>();

    // Add a CD to the list
    public static void addCD(CD c) {
        CDoptions.add(c);
    }

    // Add multiple CDs
    public static void addCDs(ArrayList<CD> cds) {
        CDoptions.addAll(cds);
    }

    // Get the size of available CDs
    public static int getCDOptionsSize() {
        return CDoptions.size();
    }

    // Display all CDs
    public static void displayCD() {
        System.out.println("Available Certificate of Deposit Options:");
        for (int i = 0; i < CDoptions.size(); i++) {
            System.out.println("Option " + (i + 1) + ":");
            CDoptions.get(i).displayCD();
        }
    }

    // Method to simulate CD purchase
    public static void PurchaseCD(int selection, double userAmount) {
        CD selectedCD = CDoptions.get(selection - 1);
        System.out.println("You have purchased a " + selectedCD.getTerm() + "-month CD with $" + userAmount + " at an interest rate of " + selectedCD.getIR() + "%.");
    }

    public static CD getCD(int selection) {
        return CDoptions.get((selection - 1));
    }

}



//manav and Shrouya
class SafetyDepositBox {

    private static Map<String, BoxDetails> boxes = new HashMap<>();
    private static final Map<String, BoxDetails> BOX_SIZES = new HashMap<>();
    private static final Map<String, Set<String>> authorizedUsers = new HashMap<>(); // BoxKey -> Set of authorized usernames
    private static final SimpleDateFormat DOB_FORMAT = new SimpleDateFormat("MMddyyyy");
    private static final Map<String, String[]> userInfoMap = new HashMap<>();
    private  String Firstname;
    private  String Lastname;
    private  String password;
    private String dob;
    private String SSN;
    private String userID;
    static void AddUsers(String firstname, String lastname, String password, String dob, String SSN, String userID) {

        userInfoMap.put(userID, new String[]{firstname, lastname, dob, SSN, password});

    }


    static {
        BOX_SIZES.put("Small", new BoxDetails("Small", "5\" x 5\" x 21.5\"", 50.0));
        BOX_SIZES.put("Medium", new BoxDetails("Medium", "3\" x 10\" x 21.5\"", 60.0));
        BOX_SIZES.put("Large", new BoxDetails("Large", "5\" x 10\" x 21.5\"", 80.0));

        loadBoxesFromCSV();
    }




    private static boolean isValidDate(String dateStr) {
        if (dateStr == null || dateStr.length() != 8) {
            return false;
        }
        try {
            DOB_FORMAT.setLenient(false);
            DOB_FORMAT.parse(dateStr);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    static String login(Scanner scanner) {
        System.out.println("=== Login ===");

        System.out.print("Enter your First Name: ");
        String firstname = scanner.nextLine();

        System.out.print("Enter your Last Name: ");
        String lastname = scanner.nextLine();

        String dob;
        while (true) {
            System.out.print("Enter your date of birth (MMDDYYYY): ");
            dob = scanner.nextLine();
            if (isValidDate(dob)) {
                break;
            } else {
                System.out.println("Invalid date format. Please enter in MMDDYYYY format.");
            }
        }

        String ssn;
        while (true) {
            System.out.print("Enter your Social Security Number (SSN): ");
            ssn = scanner.nextLine();
            if (ssn.matches("\\d{9}")) {
                break;
            } else {
                System.out.println("Invalid SSN format. Please enter exactly 9 digits.");
            }
        }

        System.out.print("Enter your password: ");
        String password = scanner.nextLine();

        for (Map.Entry<String, String[]> entry : userInfoMap.entrySet()) {
            String id = entry.getKey();
            String[] info = entry.getValue();

            if ((firstname + lastname).equals(info[0] + info[1]) && dob.equals(info[2]) && ssn.equals(info[3]) && password.equals(info[4])) {
                if(isUniqueIdInCSV(id)) {
                    System.out.println("Login successful!");
                    return id;
                } else {
                    System.out.println("You are not in the system. Access denied.");
                    return null;
                }
            }
        }

        System.out.println("Invalid credentials. Please try again.");
        return null;
    }

    private static boolean isUniqueIdInCSV(String uniqueId) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/BankDepositBox.csv"))) {
            String line = reader.readLine(); // Skip header
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 11 && parts[10].trim().equals(uniqueId)) {
                    return true;
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV: " + e.getMessage());
        }
        return false;
    }


    private static void loadBoxesFromCSV() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/BankDepositBox.csv"))) {


            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 9) {
                    String boxKey = parts[0];
                    String size = parts[1];
                    String dimensions = parts[2];
                    try {
                        double cost = Double.parseDouble(parts[3]);
                        String contents = parts[4];
                        double totalValue = Double.parseDouble(parts[5]);
                        BoxDetails box = new BoxDetails(size, dimensions, cost, contents, totalValue);
                        boxes.put(boxKey, box);
                    } catch (NumberFormatException e) {

                    }
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("No previous data file found.");
        } catch (IOException e) {
            System.out.println("Error reading data file: " + e.getMessage());
        }
    }

    static void ownerMenu(Scanner scanner, String uniqueId) {
        System.out.println("\n=== Owner Menu ===");
        if (hasExistingBox(uniqueId)) {
            System.out.println("Your deposit box:");
            viewBoxDetails(uniqueId);
        }

        while (true) {
            System.out.println("\n1. Create Box");
            System.out.println("2. Modify Box Contents");
            System.out.println("3. View Box Details");
            System.out.println("4. Change Box size");
            System.out.println("5. Grant Access to Other User");
            System.out.println("6. View Authorized Users");
            System.out.println("7. Logout");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 1) {
                createBox(scanner, uniqueId);
            } else if (choice == 2) {
                modifyBoxContents(scanner, uniqueId);
            } else if (choice == 3) {
                viewBoxDetails(uniqueId);
            } else if (choice == 4) {
            	 changeBoxSize(scanner, uniqueId);
            } else if (choice == 5) {
                grantAccessToUser(scanner, uniqueId);
            } else if (choice == 6) {
                viewAuthorizedUsers(uniqueId);

            } else if (choice == 7) {
                System.out.println("Logged out.");
                break;
            } else {
                System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static boolean hasExistingBox(String uniqueId) {
        for (String boxId : boxes.keySet()) {
            if (boxId.startsWith(uniqueId)) {
                return true;
            }
        }
        return false;
    }
    private static void changeBoxSize(Scanner scanner, String uniqueId) {
        System.out.println("\n=== Change Box Size ===");

        // Find current box
        String oldBoxKey = null;
        for (String key : boxes.keySet()) {
            if (key.startsWith(uniqueId)) {
                oldBoxKey = key;
                break;
            }
        }

        if (oldBoxKey == null) {
            System.out.println("No box found for this user.");
            return;
        }

        BoxDetails currentBox = boxes.get(oldBoxKey);

        System.out.println("Current size: " + currentBox.getSize());
        System.out.println("Available sizes:");
        for (String size : BOX_SIZES.keySet()) {
            System.out.println("- " + size);
        }

        System.out.print("Enter new box size: ");
        String inputSize = scanner.nextLine();
        String newSize = normalizeSize(inputSize);

        if (newSize == null || !BOX_SIZES.containsKey(newSize)) {
            System.out.println("Invalid size.");
            return;
        }


        BoxDetails newTemplate = BOX_SIZES.get(newSize);
        currentBox.setSize(newSize);
        currentBox.setDimensions(newTemplate.getDimensions());
        currentBox.setCost(newTemplate.getCost());

        String newBoxKey = uniqueId + "_" + newSize;

        boxes.remove(oldBoxKey);
        boxes.put(newBoxKey, currentBox);

        saveBoxesToCSV(newBoxKey, "Modified");

        System.out.println("Box size updated successfully!");
    }



    private static void viewBoxDetails(String uniqueId) {
    	// Look for a box associated with the uniqueId
        for (String boxKey : boxes.keySet()) {
            if (boxKey.startsWith(uniqueId)) {
                BoxDetails box = boxes.get(boxKey);
                System.out.println("\nBox Details:");
                System.out.println("Size: " + box.getSize());
                System.out.println("Dimensions: " + box.getDimensions());
                System.out.println("Contents: " + box.getContents());
                System.out.println("Cost: $" + box.getCost());
                System.out.println("Total Value: $" + box.getTotalValue());
                return;
            }
        }
        System.out.println("No box found for your account.");
    }

    private static void createBox(Scanner scanner, String uniqueId) {

    	for (String key : boxes.keySet()) {
    	    if (key.startsWith(uniqueId + "_")) {
    	        System.out.println("You already have a box. Cannot create another one.");
    	        return;
    	    }
    	}
    	  System.out.println("\n=== Create Box ===");

    	    System.out.println("Available box sizes:");
    	    for (String size : BOX_SIZES.keySet()) {
    	        BoxDetails details = BOX_SIZES.get(size);
    	        System.out.println("- " + size + " | Dimensions: " + details.getDimensions() + " | Price: $" + details.getCost());
    	    }

    	    System.out.print("Enter the size of the box you want to create: ");
    	    String inputSize = scanner.nextLine();
    	    String size = normalizeSize(inputSize);

    	    if (size == null || !BOX_SIZES.containsKey(size)) {
    	        System.out.println("Invalid size.");
    	        return;
    	    }

    	    if (!BOX_SIZES.containsKey(size)) {
    	        System.out.println("Invalid size. Please try again.");
    	        return;
    	    }

    	    BoxDetails template = BOX_SIZES.get(size);

    	    System.out.print("Enter the contents of the box: ");
    	    String contents = scanner.nextLine();

    	    System.out.print("Enter the total value of the box's contents: $");
    	    double totalValue = scanner.nextDouble();
    	    scanner.nextLine(); // clear newline

    	    String boxKey = uniqueId + "_" + size;

    	    BoxDetails newBox = new BoxDetails(size, template.getDimensions(), template.getCost(), contents, totalValue);
    	    boxes.put(boxKey, newBox);

    	    System.out.println("Box created successfully!");

    	    saveBoxesToCSV(boxKey, "Created");


    }
    private static String normalizeSize(String input) {
        if (input == null) return null;
        String lower = input.trim().toLowerCase();
        switch (lower) {
            case "small": return "Small";
            case "medium": return "Medium";
            case "large": return "Large";
            default: return null;
        }
    }

    private static void saveBoxesToCSV(String modifiedBoxKey, String action) {
        try {
            List<String> updatedLines = new ArrayList<>();
            boolean headerAdded = false;
            String targetUniqueId = modifiedBoxKey.split("_")[0];

            try (BufferedReader reader = new BufferedReader(new FileReader("src/BankDepositBox.csv"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(",", -1); // keep empty values

                    // Header row
                    if (!headerAdded && line.toLowerCase().contains("boxkey")) {
                        updatedLines.add(line);
                        headerAdded = true;
                        continue;
                    }

                    // Match the UniqueId column (11th index == 10)
                    if (parts.length >= 12 && parts[10].equals(targetUniqueId)) {
                        BoxDetails box = boxes.get(modifiedBoxKey);
                        if (box != null) {
                            String updatedLine = String.join(",", Arrays.asList(
                                modifiedBoxKey,
                                box.getSize(),
                                box.getDimensions(),
                                String.valueOf(box.getCost()),
                                box.getContents(),
                                String.valueOf(box.getTotalValue()),
                                action,
                                new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(new Date()),
                                parts[8], parts[9], parts[10], parts[11] // preserve auth info
                            ));
                            updatedLines.add(updatedLine);
                            continue;
                        }
                    }

                    // Preserve untouched lines
                    updatedLines.add(line);
                }
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/BankDepositBox.csv"))) {
                for (String l : updatedLines) {
                    writer.write(l);
                    writer.newLine();
                }
            }

            System.out.println("Box was successfully: " + action);
        } catch (IOException e) {
            System.out.println("Error saving to CSV: " + e.getMessage());
        }
    }







    private static void modifyBoxContents(Scanner scanner, String uniqueId) {
        System.out.println("\n=== Modify Box Contents ===");

        // Find the box belonging to this user
        String userBoxKey = null;
        for (String boxKey : boxes.keySet()) {
            if (boxKey.startsWith(uniqueId)) {
                userBoxKey = boxKey;
                break;
            }
        }

        if (userBoxKey == null) {
            System.out.println("You donÃ¢â‚¬â„¢t have a box to modify.");
            return;
        }

        BoxDetails box = boxes.get(userBoxKey);

        System.out.println("Current contents: " + box.getContents());
        System.out.println("Current total value: $" + box.getTotalValue());

        System.out.print("Enter new contents: ");
        String newContents = scanner.nextLine();

        System.out.print("Enter new total value: ");
        double newValue = scanner.nextDouble();
        scanner.nextLine(); // flush newline

        box.setContents(newContents);
        box.setTotalValue(newValue);

        // Save updated box info with new action "Modified"
        saveBoxesToCSV(userBoxKey, "Modified");



    }

   private static void grantAccessToUser(Scanner scanner, String uniqueId) {
    String boxKey = boxes.keySet().stream()
            .filter(key -> key.startsWith(uniqueId))
            .findFirst().orElse(null);

    if (boxKey == null) {
        System.out.println("No box found for your ID.");
        return;
    }

    String authUsername;
    while (true) {
        System.out.print("Enter a username to provide to an authorized user: ");
        authUsername = scanner.nextLine().trim();

        if (!isAuthUsernameTaken(authUsername)) break;

        System.out.println("Username already taken. Try another.");
    }

    System.out.print("Enter a password for the authorized user: ");
    String authPassword = scanner.nextLine().trim();

    // Ask for permission level
    System.out.print("Grant permission level (view/full): ");
    String permission = scanner.nextLine().trim().toLowerCase();

    while (!permission.equals("view") && !permission.equals("full")) {
        System.out.print("Invalid input. Enter 'view' or 'full': ");
        permission = scanner.nextLine().trim().toLowerCase();
    }

    updateAuthInfoInCSV(boxKey, authUsername, authPassword, permission);
    System.out.println("Access granted successfully.");
}

    private static boolean isAuthUsernameTaken(String username) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/BankDepositBox.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 10 && username.equals(parts[8].trim())) return true;
            }
        } catch (IOException e) {
            System.out.println("Error checking username: " + e.getMessage());
        }
        return false;
    }

    private static void updateAuthInfoInCSV(String boxKey, String authUsername, String authPassword, String permission) {
        List<String> updatedLines = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("src/BankDepositBox.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 11 && parts[0].equals(boxKey)) {
                    if (parts.length == 11) {
                        parts = Arrays.copyOf(parts, 12); // Add space for AuthPerm
                        parts[11] = ""; // Init AuthPerm if missing
                    }
                    parts[8] = authUsername;   // Username
                    parts[9] = authPassword;   // Password
                    parts[11] = permission;    // Permission (view/full)
                    line = String.join(",", parts);
                }
                updatedLines.add(line);
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/BankDepositBox.csv"))) {
                for (String l : updatedLines) {
                    writer.write(l);
                    writer.newLine();
                }
            }

        } catch (IOException e) {
            System.out.println("Error updating CSV: " + e.getMessage());
        }
    }


    private static void viewAuthorizedUsers(String uniqueId) {
        for (String boxKey : boxes.keySet()) {
            if (boxKey.startsWith(uniqueId)) {
                try (BufferedReader reader = new BufferedReader(new FileReader("src/BankDepositBox.csv"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split(",");
                        if (parts.length >= 11 && parts[0].equals(boxKey)) {
                            if (parts.length == 11) {
                                parts = Arrays.copyOf(parts, 12); // Add room for permission if missing
                                parts[11] = ""; // Default empty permission
                            }

                            System.out.println("Authorized Username: " + parts[8]);
                            System.out.println("Authorized Password: " + parts[9]);
                            System.out.println("Permission Level: " + parts[11]); // Now safe
                            return;
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Error reading authorized user: " + e.getMessage());
                }
            }
        }
        System.out.println("No authorized users found.");
    }


    static void loginAsAuthorizedUser(Scanner scanner) {
        System.out.println("=== Authorized User Login ===");
        System.out.print("Enter authorized username: ");
        String username = scanner.nextLine();

        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        try (BufferedReader reader = new BufferedReader(new FileReader("src/BankDepositBox.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 12 && parts[8].equals(username) && parts[9].equals(password)) {
                    System.out.println("Access granted...");
                    String uniqueId = parts[10];
                    String permission = parts[11].trim().toLowerCase();
                    authorizedUserMenu(uniqueId, permission);
                    return;
                }
            }
        } catch (IOException e) {
            System.out.println("Error during login: " + e.getMessage());
        }

        System.out.println("Invalid authorized credentials.");
    }


private static void authorizedUserMenu(String uniqueId, String permission) {
    Scanner scanner = new Scanner(System.in);
    while (true) {
        System.out.println("\n--- Authorized User Menu ---");
        System.out.println("1. View Box Details");
        if (permission.equals("full")) {
            System.out.println("2. Modify Box Contents");
        }
        System.out.println("0. Logout");
        System.out.print("Choose an option: ");
        String choice = scanner.nextLine();

        switch (choice) {
            case "1":
                viewBoxDetails(uniqueId);
                break;
            case "2":
                if (permission.equals("full")) {
                    modifyBoxContents(scanner, uniqueId);
                } else {
                    System.out.println("You do not have permission to modify.");
                }
                break;
            case "0":
                return;
            default:
                System.out.println("Invalid choice.");
        }
    }
}


    static class BoxDetails {
        private String size, dimensions, contents = "";
        private double cost, totalValue = 0.0;

        public BoxDetails(String size, String dimensions, double cost) {
            this(size, dimensions, cost, "", 0.0);
        }

        public void setSize(String newSize) {
			this.size = newSize;
		}

		public void setCost(double newcost) {

			this.cost = newcost;
		}

		public void setDimensions(String newdimensions) {
			this.dimensions = newdimensions;
		}

		public BoxDetails(String size, String dimensions, double cost, String contents, double totalValue) {
            this.size = size;
            this.dimensions = dimensions;
            this.cost = cost;
            this.contents = contents;
            this.totalValue = totalValue; }

        public String getSize() { return size; }
        public String getDimensions() { return dimensions; }
        public double getCost() { return cost; }
        public String getContents() { return contents; }
        public double getTotalValue() { return totalValue; }
        public void setContents(String contents) { this.contents = contents; }
        public void setTotalValue(double totalValue) { this.totalValue = totalValue; }
    }
}



//MJ OSTAP AARON
class CheckingAccount {
    private String uniqueID;
    private String accountNumber;
    private String accountHolderName;
    private double balance;
    private boolean isOverdraftProtectionEnabled;
    private double overdraftLimit;
    private double overdraftFee = 35.00;
    private CheckingAccount linkedcheckingAccount;
    private Date dateOpened;
    private Date lastTransactionDate;
    private static final String CSV_FILE = "src/checkingaccount.csv";

    // Constructor for loading existing account
    public CheckingAccount(String uniqueID, String accountNumber, String accountHolderName, double balance, boolean isOverdraftProtectionEnabled, double overdraftLimit, Date dateOpened, Date lastTransactionDate) {
        this.uniqueID = uniqueID;
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = balance;
        this.isOverdraftProtectionEnabled = isOverdraftProtectionEnabled;
        this.overdraftLimit = overdraftLimit;
        this.dateOpened = dateOpened;
        this.lastTransactionDate = lastTransactionDate;
        this.linkedcheckingAccount = null;
    }

    // Constructor for new account
    public CheckingAccount(String uniqueID, String accountHolderName, double balance, boolean isOverdraftProtectionEnabled, double overdraftLimit) {
        this.uniqueID = uniqueID;
        this.accountHolderName = accountHolderName;
        this.balance = balance;
        this.accountNumber = generateUniqueAccountNumber();
        this.isOverdraftProtectionEnabled = isOverdraftProtectionEnabled;
        this.overdraftLimit = overdraftLimit;
        this.dateOpened = new Date();
        this.lastTransactionDate = new Date();
    }

    public boolean withdraw(double amount) {
        if (amount <= 0) return false;
        if (amount <= balance) {
            balance -= amount;
            lastTransactionDate = new Date();
            updateCSV();
            return true;
        } else if (isOverdraftProtectionEnabled && linkedcheckingAccount != null && linkedcheckingAccount.getBalance() >= (amount - balance)) {
            double needed = amount - balance;
            linkedcheckingAccount.withdraw(needed);
            balance = 0;
            lastTransactionDate = new Date();
            updateCSV();
            return true;
        } else if (amount <= balance + overdraftLimit) {
            balance -= (amount + overdraftFee);
            lastTransactionDate = new Date();
            updateCSV();
            return true;
        }
        return false;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            lastTransactionDate = new Date();
            updateCSV();
        }
    }

    public double getBalance() { return balance; }
    public String getAccountNumber() { return accountNumber; }
    public Date getDateOpened() { return dateOpened; }
    public Date getLastTransactionDate() { return lastTransactionDate; }
    public boolean isOverdraftProtectionEnabled() { return isOverdraftProtectionEnabled; }
    public double getOverdraftLimit() { return overdraftLimit; }
    public double getOverdraftFee() { return overdraftFee; }

    private String generateUniqueAccountNumber() {
        Set<String> existing = getExistingAccountNumbers();
        String num;
        do {
            num = String.format("%012d", (long)(Math.random() * 1_000_000_000_000L));
        } while (existing.contains(num));
        return num;
    }

    private Set<String> getExistingAccountNumbers() {
        Set<String> nums = new HashSet<>();
        File file = new File(CSV_FILE);
        if (!file.exists()) return nums;
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            br.readLine();
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 2) nums.add(parts[1]);
            }
        } catch (IOException e) {}
        return nums;
    }

    public void saveToCSV() {
        boolean exists = new File(CSV_FILE).exists();
        try (FileWriter fw = new FileWriter(CSV_FILE, true)) {
            if (!exists) fw.append("uniqueID,AccountNumber,AccountHolderName,Balance,OverdraftProtection,OverdraftLimit,DateOpened,LastTransactionDate\n");
            fw.append(String.join(",",
                uniqueID,
                accountNumber,
                accountHolderName,
                String.format("%.2f", balance),
                String.valueOf(isOverdraftProtectionEnabled),
                String.format("%.2f", overdraftLimit),
                dateOpened.toString(),
                lastTransactionDate.toString()
            ));
            fw.append("\n");
            System.out.println("[âœ“] Account saved to " + CSV_FILE);
        } catch (IOException e) {
            System.out.println("[âœ—] Error saving account to " + CSV_FILE);
            e.printStackTrace();
        }
    }

    public void updateCSV() {
        List<String> lines = new ArrayList<>();
        String header = "uniqueID,AccountNumber,AccountHolderName,Balance,OverdraftProtection,OverdraftLimit,DateOpened,LastTransactionDate";
        try (BufferedReader br = new BufferedReader(new FileReader(CSV_FILE))) {
            String ln;
            boolean first = true;
            while ((ln = br.readLine()) != null) {
                if (first) { lines.add(header); first = false; continue; }
                String[] parts = ln.split(",");
                if (parts[1].equals(accountNumber)) {
                    parts[3] = String.format("%.2f", balance);
                    parts[7] = lastTransactionDate.toString();
                }
                lines.add(String.join(",", parts));
            }
        } catch (IOException e) {
            System.out.println("[âœ—] Error reading file during update.");
            e.printStackTrace();
            return;
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(CSV_FILE))) {
            for (String line : lines) writer.write(line + "\n");
            System.out.println("[âœ“] Account updated in " + CSV_FILE);
        } catch (IOException e) {
            System.out.println("[âœ—] Error writing file during update.");
            e.printStackTrace();
        }
    }

    public static CheckingAccount loadByAccountNumber(String accountNumber) {
        try (BufferedReader br = new BufferedReader(new FileReader("src/checkingaccount.csv"))) {
            String line;
            br.readLine(); // skip header
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length >= 8 && data[1].equals(accountNumber)) {
                    String uniqueID = data[0];
                    String accNum = data[1];
                    String name = data[2];
                    double balance = Double.parseDouble(data[3]);
                    boolean overdraft = Boolean.parseBoolean(data[4]);
                    double limit = Double.parseDouble(data[5]);
                    SimpleDateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy", Locale.ENGLISH);
                    Date opened = formatter.parse(data[6]);
                    Date last = formatter.parse(data[7]);

                    return new CheckingAccount(uniqueID, accNum, name, balance, overdraft, limit, opened, last);
                }
            }
        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }
        return null;
    }
    public String getUniqueID() {
        return uniqueID;
    }

}

class SavingsAccount {
    private String uniqueID;
    private String accountNumber;
    private String accountHolderName;
    private double balance;
    private boolean isOverdraftProtectionEnabled;
    private double overdraftLimit;
    private double overdraftFee = 35.00;
    private SavingsAccount linkedcheckingAccount;
    private Date dateOpened;
    private Date lastTransactionDate;
    private static final String CSV_FILE = "src/savingsaccount.csv";

    // Constructor for loading existing account
    public SavingsAccount(String uniqueID, String accountNumber, String accountHolderName, double balance, boolean isOverdraftProtectionEnabled, double overdraftLimit, Date dateOpened, Date lastTransactionDate) {
        this.uniqueID = uniqueID;
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = balance;
        this.isOverdraftProtectionEnabled = isOverdraftProtectionEnabled;
        this.overdraftLimit = overdraftLimit;
        this.dateOpened = dateOpened;
        this.lastTransactionDate = lastTransactionDate;
        this.linkedcheckingAccount = null;
    }

    // Constructor for new account
    public SavingsAccount(String uniqueID, String accountHolderName, double balance, boolean isOverdraftProtectionEnabled, double overdraftLimit) {
        this.uniqueID = uniqueID;
        this.accountHolderName = accountHolderName;
        this.balance = balance;
        this.accountNumber = generateUniqueAccountNumber();
        this.isOverdraftProtectionEnabled = isOverdraftProtectionEnabled;
        this.overdraftLimit = overdraftLimit;
        this.dateOpened = new Date();
        this.lastTransactionDate = new Date();
    }

    public boolean withdraw(double amount) {
        if (amount <= 0) return false;
        if (amount <= balance) {
            balance -= amount;
            lastTransactionDate = new Date();
            updateCSV();
            return true;
        } else if (isOverdraftProtectionEnabled && linkedcheckingAccount != null && linkedcheckingAccount.getBalance() >= (amount - balance)) {
            double needed = amount - balance;
            linkedcheckingAccount.withdraw(needed);
            balance = 0;
            lastTransactionDate = new Date();
            updateCSV();
            return true;
        } else if (amount <= balance + overdraftLimit) {
            balance -= (amount + overdraftFee);
            lastTransactionDate = new Date();
            updateCSV();
            return true;
        }
        return false;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            lastTransactionDate = new Date();
            updateCSV();
        }
    }

    public double getBalance() { return balance; }
    public String getAccountNumber() { return accountNumber; }
    public Date getDateOpened() { return dateOpened; }
    public Date getLastTransactionDate() { return lastTransactionDate; }
    public boolean isOverdraftProtectionEnabled() { return isOverdraftProtectionEnabled; }
    public double getOverdraftLimit() { return overdraftLimit; }
    public double getOverdraftFee() { return overdraftFee; }

    private String generateUniqueAccountNumber() {
        Set<String> existing = getExistingAccountNumbers();
        String num;
        do {
            num = String.format("%012d", (long)(Math.random() * 1_000_000_000_000L));
        } while (existing.contains(num));
        return num;
    }

    private Set<String> getExistingAccountNumbers() {
        Set<String> nums = new HashSet<>();
        File file = new File(CSV_FILE);
        if (!file.exists()) return nums;
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            br.readLine();
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 2) nums.add(parts[1]);
            }
        } catch (IOException e) {}
        return nums;
    }

    public void saveToCSV() {
        boolean exists = new File(CSV_FILE).exists();
        try (FileWriter fw = new FileWriter(CSV_FILE, true)) {
            if (!exists) fw.append("uniqueID,AccountNumber,AccountHolderName,Balance,OverdraftProtection,OverdraftLimit,DateOpened,LastTransactionDate\n");
            fw.append(String.join(",",
                uniqueID,
                accountNumber,
                accountHolderName,
                String.format("%.2f", balance),
                String.valueOf(isOverdraftProtectionEnabled),
                String.format("%.2f", overdraftLimit),
                dateOpened.toString(),
                lastTransactionDate.toString()
            ));
            fw.append("\n");
            System.out.println("[âœ“] Account saved to " + CSV_FILE);
        } catch (IOException e) {
            System.out.println("[âœ—] Error saving account to " + CSV_FILE);
            e.printStackTrace();
        }
    }

    public void updateCSV() {
        List<String> lines = new ArrayList<>();
        String header = "uniqueID,AccountNumber,AccountHolderName,Balance,OverdraftProtection,OverdraftLimit,DateOpened,LastTransactionDate";
        try (BufferedReader br = new BufferedReader(new FileReader(CSV_FILE))) {
            String ln;
            boolean first = true;
            while ((ln = br.readLine()) != null) {
                if (first) { lines.add(header); first = false; continue; }
                String[] parts = ln.split(",");
                if (parts[1].equals(accountNumber)) {
                    parts[3] = String.format("%.2f", balance);
                    parts[7] = lastTransactionDate.toString();
                }
                lines.add(String.join(",", parts));
            }
        } catch (IOException e) {
            System.out.println("[âœ—] Error reading file during update.");
            e.printStackTrace();
            return;
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(CSV_FILE))) {
            for (String line : lines) writer.write(line + "\n");
            System.out.println("[âœ“] Account updated in " + CSV_FILE);
        } catch (IOException e) {
            System.out.println("[âœ—] Error writing file during update.");
            e.printStackTrace();
        }
    }

    public static SavingsAccount loadByAccountNumber(String accountNumber) {
        try (BufferedReader br = new BufferedReader(new FileReader("src/savingsaccount.csv"))) {
            String line;
            br.readLine(); // skip header
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length >= 8 && data[1].equals(accountNumber)) {
                    String uniqueID = data[0];
                    String accNum = data[1];
                    String name = data[2];
                    double balance = Double.parseDouble(data[3]);
                    boolean overdraft = Boolean.parseBoolean(data[4]);
                    double limit = Double.parseDouble(data[5]);
                    SimpleDateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy", Locale.ENGLISH);
                    Date opened = formatter.parse(data[6]);
                    Date last = formatter.parse(data[7]);

                    return new SavingsAccount(uniqueID, accNum, name, balance, overdraft, limit, opened, last);
                }
            }
        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }
        return null;
    }
}
// Shrouya and Manav 2nd sprint
class FXBank {
    static final String TRANSACTIONS_FILE = "src/transactions.csv";
    static final String[] CURRENCIES = {"USD", "EUR", "GBP", "CAD", "INDR"};
    static final double FEE_PERCENTAGE = 2.5;
    static final String API_KEY = "4b50e36e9afb0ce012dfa2d1"; // Replace with your actual API key
    static final Scanner scanner = new Scanner(System.in);


    static void initializeFiles() {
        try {

            File transactionsFile = new File(TRANSACTIONS_FILE);
            if (!transactionsFile.exists()) {
                FileWriter writer = new FileWriter(transactionsFile);
                writer.write("FromCurrency,ToCurrency,OriginalAmount,ConvertedAmount,Fee,FinalAmount,TransactionType,DateTime\n");
                writer.close();
                System.out.println("Created transactions.csv.");
            }
        } catch (IOException e) {
            System.out.println("Error initializing files: " + e.getMessage());
        }
    }

    static boolean authenticateUser(String Firstname, String Lastname,String SSN) {
        System.out.print("Enter First Name: ");
        String firstName = scanner.nextLine();
        System.out.print("Enter Last Name: ");
        String lastName = scanner.nextLine();
        System.out.print("Enter SSN: ");
        String ssn = scanner.nextLine();
        if(firstName.equals(firstName) && lastName.equals(lastName) && ssn.equals(SSN)) {
            return true;
        }else{
            return false;
        }

    }

    static void showRates() {
        Map<String, Double> rates = getExchangeRates();
        if (rates.isEmpty()) {
            System.out.println("Could not retrieve exchange rates.");
            return;
        }
        System.out.println("Exchange Rates (Base: USD):");
        for (String currency : CURRENCIES) {
            System.out.println("1 USD = " + rates.get(currency) + " " + currency);
        }
    }

    static void performConversion() {
        Map<String, Double> rates = getExchangeRates();
        if (rates.isEmpty()) {
            System.out.println("Could not retrieve rates.");
            return;
        }

        System.out.print("Enter source currency (USD): ");
        String source = scanner.nextLine().toUpperCase();
        if (!source.equals("USD")) {
            System.out.println("Currently only USD is supported as source.");
            return;
        }

        System.out.print("Enter target currency (EUR, GBP, CAD, INDR): ");
        String target = scanner.nextLine().toUpperCase();
        if (!rates.containsKey(target)) {
            System.out.println("Invalid currency.");
            return;
        }

        System.out.print("Enter amount to convert: ");
        double amount = Double.parseDouble(scanner.nextLine());

        double rate = rates.get(target);
        double converted = amount * rate;
        double fee = converted * FEE_PERCENTAGE / 100;
        double finalAmount = converted - fee;

        System.out.println("Select transaction type: 1 = Foreign Card, 2 = Temp Account, 3 = Cash");
        String typeInput = scanner.nextLine();
        String type = typeInput.equals("1") ? "Foreign Card" : typeInput.equals("2") ? "Temp Account" : "Cash";

        System.out.println("\n--- Transaction Summary ---");
        System.out.println("Amount in USD: " + amount);
        System.out.println("Converted to " + target + ": " + converted);
        System.out.println("Fee: " + fee);
        System.out.println("Final Amount: " + finalAmount);
        System.out.println("Transaction Type: " + type);
        System.out.print("Confirm transaction (Y/N)? ");
        String confirm = scanner.nextLine();
        if (confirm.equalsIgnoreCase("Y")) {
            saveTransaction(source, target, amount, converted, fee, finalAmount, type);
            System.out.println("Transaction successful.");
        } else {
            System.out.println("Transaction cancelled.");
        }
    }

    static Map<String, Double> getExchangeRates() {
        Map<String, Double> rates = new HashMap<>();
        try {
            URL url = new URL("https://v6.exchangerate-api.com/v6/" + API_KEY + "/latest/USD");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));

            StringBuilder response = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                response.append(line);
            }
            in.close();

            String json = response.toString();
            int ratesStart = json.indexOf("\"conversion_rates\":{") + 20;
            int ratesEnd = json.indexOf("}", ratesStart);
            if (ratesStart == -1 || ratesEnd == -1) {
                throw new Exception("Invalid JSON format.");
            }

            String ratesBlock = json.substring(ratesStart, ratesEnd);
            String[] pairs = ratesBlock.split(",");
            for (String pair : pairs) {
                String[] keyValue = pair.replace("\"", "").split(":");
                if (keyValue.length == 2) {
                    String currency = keyValue[0].trim();
                    String value = keyValue[1].trim();
                    for (String c : CURRENCIES) {
                        if (c.equals(currency)) {
                            rates.put(currency, Double.parseDouble(value));
                        }
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fetching rates: " + e.getMessage());
            rates.put("USD", 1.0);
            rates.put("EUR", 0.91);
            rates.put("GBP", 0.78);
            rates.put("CAD", 1.35);
            rates.put("INDR", 83.12);
        }

        return rates;
    }

    static void saveTransaction(String from, String to, double amount, double converted, double fee, double finalAmount, String type) {
        try (FileWriter writer = new FileWriter(TRANSACTIONS_FILE, true)) {
            writer.write(from + "," + to + "," + amount + "," + converted + "," + fee + "," + finalAmount + "," + type + "," + new Date() + "\n");
        } catch (IOException e) {
            System.out.println("Error saving transaction: " + e.getMessage());
        }
    }
}

//Landon Gabe Sprint 2
class StudentLoanApplication {
    private static List<StudentLoanApplication> applications = new ArrayList<>();

    private int uniqueID;
    private int studentID;
    private String name;
    private String school;
    private double loanAmount;
    private double annualIncome;
    private int loanPeriod;
    private static final double INTEREST_RATE = 5.50;
    private Date time_purchased;
    private static Calendar calendar = Calendar.getInstance();

    // Constructor with applicationID provided externally
    public StudentLoanApplication(int uniqueID, int studentID, String name, String school, double loanAmount, double annualIncome, int loanPeriod, Date time_purchased) {
        this.uniqueID = uniqueID;  // Assign unique ID (index 0 from CSV)
        this.studentID = studentID;  // Assign student ID (index 1 from CSV)
        this.name = name;
        this.school = school;
        this.loanAmount = loanAmount;
        this.annualIncome = annualIncome;
        this.loanPeriod = loanPeriod;
        this.time_purchased = time_purchased;
    }


    public static boolean userExists(int studentID) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/StudentLoan.csv"))) {
            String line = reader.readLine(); // skip header row, if present
            while ((line = reader.readLine()) != null) {
                String[] values = line.split(",");
                if (values.length > 1) {
                    try {
                        int existingID = Integer.parseInt(values[1].trim()); // values[1] = studentID
                        if (existingID == studentID) {
                            return true;
                        }
                    } catch (NumberFormatException e) {
                        // Skip invalid line
                        System.out.println("Skipping invalid line (bad ID): " + Arrays.toString(values));
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error checking existing users: " + e.getMessage());
        }
        return false;
    }




    public double calculateTotalRepayment() {
        return loanAmount * Math.pow(1 + (INTEREST_RATE / 100), loanPeriod);
    }

    public void displayApplicationDetails() {
        System.out.println("\n=== Student Loan Application Summary ===");
        System.out.println("Application ID: " + uniqueID);
        System.out.println("Applicant Name: " + name);
        System.out.println("School: " + school);
        System.out.println("Loan Amount Requested: $" + loanAmount);
        System.out.println("Annual Income: $" + annualIncome);
        System.out.println("Loan Period: " + loanPeriod + " years");
        System.out.println("Time Remaining on Loan: " + getRemainingTime());
        System.out.println("Interest Rate: " + INTEREST_RATE + "%");
        System.out.println("Total Repayment Amount: $" + String.format("%.2f", calculateTotalRepayment()));
        System.out.println("Application Status: Submitted");
    }

    public String getRemainingTime() {
        Calendar endDate = Calendar.getInstance();
        endDate.setTime(time_purchased);
        endDate.add(Calendar.YEAR, loanPeriod);

        Date currentDate = new Date();
        long timeDiff = endDate.getTimeInMillis() - currentDate.getTime();

        if (timeDiff <= 0) {
            return "Loan period completed.";
        }

        long daysLeft = timeDiff / (1000 * 60 * 60 * 24);
        long years = daysLeft / 365;
        long months = (daysLeft % 365) / 30;
        long days = (daysLeft % 365) % 30;

        return years + " years, " + months + " months, and " + days + " days remaining";
    }

    public String toCSVRow() {
        return uniqueID + "," + studentID + "," + name + "," + school + "," +
                loanAmount + "," + annualIncome + "," + loanPeriod + "," +
                INTEREST_RATE + "," + time_purchased + "," + String.format("%.2f", calculateTotalRepayment());
    }

    public static void writeToFile(StudentLoanApplication application) {
        try (FileWriter writer = new FileWriter("src/StudentLoan.csv", true)) {
            writer.write(application.toCSVRow() + "\n");
            System.out.println("Application saved to StudentLoan.csv.");
        } catch (Exception e) {
            System.out.println("Error saving application: " + e.getMessage());
        }
    }

    public static List<StudentLoanApplication> getApplications() {
        return applications;
    }

    // Optional: remove all applications (for testing/reset)
    public static void clearApplications() {
        applications.clear();
    }

    // --- Optional main method for demonstration ---
    public static StudentLoanApplication getExistingApplication(int studentID) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/StudentLoan.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] values = line.split(",");
                if (values.length >= 8) {
                    try {
                        // Assuming uniqueID is at index 0 in CSV row
                        int uniqueID = Integer.parseInt(values[0].trim()); // Now uniqueID is at index 0
                        int existingID = Integer.parseInt(values[1].trim()); // Assuming studentID is at index 1

                        if (existingID == studentID) {
                            // Parse values from CSV row
                            String name = values[2].trim();
                            String school = values[3].trim();
                            double loanAmount = Double.parseDouble(values[4].trim());
                            double annualIncome = Double.parseDouble(values[5].trim());
                            int loanPeriod = Integer.parseInt(values[6].trim());
                            Date timePurchased;
                            try {
                                timePurchased = new Date(values[7].trim());  // Assuming time_purchased is at index 7
                            } catch (Exception e) {
                                timePurchased = new Date();  // fallback to current date if parsing fails
                            }

                            // Now we can create the StudentLoanApplication object
                            return new StudentLoanApplication(uniqueID, existingID, name, school, loanAmount, annualIncome, loanPeriod, timePurchased);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Skipping invalid line (bad ID): " + Arrays.toString(values));
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error reading existing application: " + e.getMessage());
        }
        return null;
    }



}



//Aasmaa Sprints 1 and 2
class Loan2 {
    protected String borrowerName;
    protected double loanAmount;
    protected double interestRate;
    protected int durationInYears;

    public Loan2(String borrowerName, double loanAmount, double interestRate, int durationInYears) {
        this.borrowerName = borrowerName;
        this.loanAmount = loanAmount;
        this.interestRate = interestRate;
        this.durationInYears = durationInYears;
    }

    public String getBorrowerName() {
        return borrowerName;
    }

    public void setBorrowerName(String borrowerName) {
        this.borrowerName = borrowerName;
    }

    public double getLoanAmount() {
        return loanAmount;
    }

    public void setLoanAmount(double loanAmount) {
        this.loanAmount = loanAmount;
    }

    public double getInterestRate() {
        return interestRate;
    }

    public void setInterestRate(double interestRate) {
        this.interestRate = interestRate;
    }

    public int getDurationInYears() {
        return durationInYears;
    }

    public void setDurationInYears(int durationInYears) {
        this.durationInYears = durationInYears;
    }

    public double calculateTotalRepayment() {
        return loanAmount + (loanAmount * interestRate * durationInYears / 100);
    }

    public void displayLoanDetails() {
        DecimalFormat df = new DecimalFormat("#,###.00");
        System.out.println("");
        System.out.println("Borrower: " + borrowerName);
        System.out.println("Loan Amount: $" + df.format(loanAmount));
        System.out.println("Interest Rate: " + interestRate + "%");
        System.out.println("Duration: " + durationInYears + " years");
        System.out.println("Total Repayment: $" + df.format(calculateTotalRepayment()));
        System.out.println("");
    }
}

class MedicalLoan extends Loan2 {
    public MedicalLoan(String borrowerName, double loanAmount, int durationInYears) {
        super(borrowerName, loanAmount, 5.0, durationInYears); // Fixed 5% interest rate
    }
}

class BusinessLoan extends Loan2 {
    public BusinessLoan(String borrowerName, double loanAmount, int durationInYears) {
        super(borrowerName, loanAmount, 7.0, durationInYears); // Fixed 7% interest rate
    }
}




//GABBY AND ANT Sprint 2
class HomeLoanManager {
    // Constants for different loan types
    private static final double[] VARIABLE_INTEREST_RATES = {6.15, 6.14, 6.27, 6.95}; // ARM interest rates by term
    private static final double JUMBO_LOAN_THRESHOLD = 647200.0; // Minimum amount for jumbo loans per FHFA
    private static final double JUMBO_MIN_CREDIT_SCORE = 700.0; // Minimum credit score for jumbo loans
    private static final double JUMBO_MIN_DOWN_PAYMENT_PERCENT = 20.0; // Minimum down payment percentage for jumbo loans

    // Scanner for user input
    private static Scanner inputReader = new Scanner(System.in);

    /**
     * Main method - entry point of the application
     * @param args Command line arguments (not used)
     */


    /**
     * Displays the main menu and handles user navigation
     */
    public static void displayMainMenu() {
        Boolean insideMortgage=true;
        while (insideMortgage) {
            // Display menu options
            System.out.println("\n===== HOME LOAN MANAGEMENT SYSTEM =====");
            System.out.println("1. Submit Standard Mortgage Application");
            System.out.println("2. Submit Jumbo Mortgage Application");
            System.out.println("3. Make Mortgage Payment");
            System.out.println("4. Return to Main Menu");
            System.out.print("Enter your selection: ");

            int selection = inputReader.nextInt();

            // Process user selection
            if (selection == 1) {
                processMortgageApplication(false); // Process standard mortgage
            } else if (selection == 2) {
                processMortgageApplication(true); // Process jumbo mortgage
            } else if (selection == 3) {
                processMortgagePayment();
            } else if (selection == 4) {
                insideMortgage=false;
            } else {
                System.out.println("Error: Unrecognized option. Please try again.");
            }
        }
    }

    /**
     * Processes a mortgage application (standard or jumbo)
     * @param isJumboLoan Flag indicating if this is a jumbo loan application
     */
    public static void processMortgageApplication(boolean isJumboLoan) {
        System.out.println("\n===== " + (isJumboLoan ? "JUMBO" : "STANDARD") + " MORTGAGE APPLICATION =====");

        // Collect basic applicant information
        int fico = collectCreditScore();

        // Additional verification for jumbo loans
        if (isJumboLoan && fico < JUMBO_MIN_CREDIT_SCORE) {
            System.out.println("Sorry, jumbo loans require a minimum credit score of " + (int)JUMBO_MIN_CREDIT_SCORE);
            System.out.println("Returning to  menu...");
            return;
        }

        // Continue with application process
        String employmentVerification = verifyIncome();
        double annualIncome = collectSalaryInfo();
        double propertyValue = collectPropertyValue();

        // Verify if property value qualifies for jumbo loan
        if (isJumboLoan && propertyValue < JUMBO_LOAN_THRESHOLD) {
            System.out.println("Property value does not meet jumbo loan minimum of $" +
                               new DecimalFormat("#,###.00").format(JUMBO_LOAN_THRESHOLD));
            System.out.println("Consider applying for a standard mortgage instead.");
            System.out.println("Returning to menu...");
            return;
        }

        // Continue collecting application data
        double initialPayment = collectDownPaymentAmount(propertyValue, isJumboLoan);
        double loanToValueRatio = calculateLTV(propertyValue, initialPayment);

        // Additional verification for jumbo loans
        if (isJumboLoan && loanToValueRatio > (100 - JUMBO_MIN_DOWN_PAYMENT_PERCENT)) {
            System.out.println("Jumbo loans require at least " + JUMBO_MIN_DOWN_PAYMENT_PERCENT +
                               "% down payment. Your LTV ratio is too high.");
            System.out.println("Returning to menu...");
            return;
        }

        // Select appropriate mortgage options
        selectMortgageType(fico, annualIncome, initialPayment, propertyValue, isJumboLoan);
    }

    /**
     * Collects the applicant's credit score
     * @return The validated credit score
     */
    public static int collectCreditScore() {
        int fico;
        while (true) {
            System.out.print("Enter your current credit score (300-850): ");
            if (inputReader.hasNextInt()) {
                fico = inputReader.nextInt();
                // Validate the credit score range
                if (fico < 300 || fico > 850) {
                    System.out.println("Error: Credit score must be between 300-850. Try again.");
                    continue;
                }
                break;
            } else {
                System.out.println("Error: Please enter a valid number.");
                inputReader.next(); // Clear invalid input
            }
        }
        return fico;
    }

    /**
     * Verifies if the applicant has steady income
     * @return Confirmation of steady income status
     */
    public static String verifyIncome() {
        String employmentStatus;
        while (true) {
            System.out.print("Do you have consistent employment income? Enter Yes or No: ");
            employmentStatus = inputReader.next().toLowerCase();

            // Check employment status
            if (employmentStatus.equals("no")) {
                System.out.println("Sorry, steady income is required for mortgage eligibility.");
                displayMainMenu();
            } else if (employmentStatus.equals("yes")) {
                break;
            } else {
                System.out.println("Error: Please respond with 'Yes' or 'No' only.");
                continue;
            }
        }
        return employmentStatus;
    }

    /**
     * Collects the applicant's annual salary information
     * @return The annual salary amount
     */
    public static double collectSalaryInfo() {
        double annualIncome;
        while (true) {
            System.out.print("Enter your annual salary (numbers only, no symbols): ");
            if (inputReader.hasNextDouble()) {
                annualIncome = inputReader.nextDouble();
                break;
            } else {
                System.out.println("Error: Please enter a valid number.");
                inputReader.next(); // Clear invalid input
            }
        }
        return annualIncome;
    }

    /**
     * Calculates debt-to-income ratio and validates eligibility
     * @param annualIncome The applicant's annual income
     * @return The monthly debt obligations if eligible
     */
    public static double calculateMonthlyObligations(double annualIncome) {
        System.out.print("Enter total monthly obligations (credit cards, loans, etc.): $");
        double monthlyObligations = inputReader.nextDouble();

        // Calculate debt-to-income ratio
        double debtToIncomeRatio = (monthlyObligations / (annualIncome / 12)) * 100;

        // Check if DTI is acceptable
        if (debtToIncomeRatio > 36) {
            System.out.println("Application denied: Your debt-to-income ratio exceeds our 36% threshold.");
            displayMainMenu();
        }
        return monthlyObligations;
    }

    /**
     * Collects the property value information
     * @return The property value
     */
    public static double collectPropertyValue() {
        double propertyValue;
        while (true) {
            System.out.print("Enter the property's purchase price: $");
            if (inputReader.hasNextDouble()) {
                propertyValue = inputReader.nextDouble();
                break;
            } else {
                System.out.println("Error: Please enter a valid number.");
                inputReader.next(); // Clear invalid input
            }
        }
        return propertyValue;
    }

    /**
     * Collects the down payment amount
     * @param propertyValue The property value
     * @param isJumboLoan Flag indicating if this is a jumbo loan
     * @return The down payment amount
     */
    public static double collectDownPaymentAmount(double propertyValue, boolean isJumboLoan) {
        double initialPayment;
        double minDownPayment = isJumboLoan ?
                              (propertyValue * JUMBO_MIN_DOWN_PAYMENT_PERCENT / 100) :
                              (propertyValue * 0.20); // 20% for standard loans

        while (true) {
            System.out.print("Enter your down payment amount: $");
            if (inputReader.hasNextDouble()) {
                initialPayment = inputReader.nextDouble();

                // Verify minimum down payment requirements
                if (isJumboLoan && initialPayment < minDownPayment) {
                    System.out.println("Jumbo loans require at least " +
                                     JUMBO_MIN_DOWN_PAYMENT_PERCENT + "% down payment ($" +
                                     new DecimalFormat("#,###.00").format(minDownPayment) + ")");
                    continue;
                }
                break;
            } else {
                System.out.println("Error: Please enter a valid number.");
                inputReader.next(); // Clear invalid input
            }
        }
        return initialPayment;
    }

    /**
     * Calculates the loan-to-value ratio
     * @param propertyValue The property value
     * @param initialPayment The down payment amount
     * @return The LTV ratio as a percentage
     */
    public static double calculateLTV(double propertyValue, double initialPayment) {
        // Calculate loan-to-value ratio
        double loanToValueRatio = ((propertyValue - initialPayment) / propertyValue) * 100;

        // Check if LTV is acceptable for standard loans
        if (loanToValueRatio > 80) {
            System.out.println("Application denied: Loan-to-value ratio exceeds 80% maximum threshold.");
            displayMainMenu();
        }
        return loanToValueRatio;
    }

    /**
     * Allows the user to select a mortgage type and processes their choice
     * @param fico The credit score
     * @param annualIncome The annual income
     * @param initialPayment The down payment amount
     * @param propertyValue The property value
     * @param isJumboLoan Flag indicating if this is a jumbo loan
     */
    public static void selectMortgageType(int fico, double annualIncome, double initialPayment,
                                         double propertyValue, boolean isJumboLoan) {
        System.out.println("\nSelect mortgage type:");
        System.out.println("1. Fixed-rate mortgage");
        System.out.println("2. Adjustable-rate mortgage");
        System.out.print("Enter your choice (1 or 2): ");
        int mortgageOption = inputReader.nextInt();

        if (mortgageOption == 1) {
            // Process fixed-rate mortgage
            System.out.println("\nSelect term length - Enter 15, 20, or 30 for year duration:");
            int termYears = inputReader.nextInt();

            // Calculate interest rate with adjustments for jumbo loans
            double ratePercentage = determineInterestRate(fico, termYears, initialPayment, isJumboLoan);
            double financedAmount = calculateFixedLoanAmount(annualIncome, propertyValue, initialPayment);
            double monthlyInstallment = computeMonthlyPayment(ratePercentage, termYears, financedAmount);

            displayFixedLoanDetails(ratePercentage, financedAmount, monthlyInstallment, isJumboLoan);
        } else if (mortgageOption == 2) {
            // Process adjustable-rate mortgage
            System.out.println("\nSelect ARM structure:");
            System.out.println("1. 1/1 ARM - Rate adjusts annually after first year");
            System.out.println("2. 2/1 ARM - Rate adjusts annually after second year");
            System.out.println("3. 3/1 ARM - Rate adjusts annually after third year");
            System.out.println("5. 5/1 ARM - Rate adjusts annually after fifth year");
            System.out.print("Enter your choice: ");
            int adjustableTerm = inputReader.nextInt();

            // Get appropriate ARM rate with jumbo adjustment if needed
            double initialRate = getAdjustableRateForTerm(adjustableTerm, isJumboLoan);
            double financedAmount = calculateAdjustableLoanAmount(annualIncome, propertyValue, initialPayment);
            double monthlyInstallment = computeAdjustableMonthlyPayment(initialRate, financedAmount, adjustableTerm);

            displayAdjustableLoanDetails(financedAmount, monthlyInstallment, initialRate, isJumboLoan);
        } else {
            System.out.println("Error: Invalid selection. Returning to mortgage selection.");
            selectMortgageType(fico, annualIncome, initialPayment, propertyValue, isJumboLoan);
        }
    }

    /**
     * Determines the interest rate based on credit score, term, and loan type
     * @param fico The credit score
     * @param termYears The mortgage term in years
     * @param initialPayment The down payment amount
     * @param isJumboLoan Flag indicating if this is a jumbo loan
     * @return The calculated interest rate percentage
     */
    public static double determineInterestRate(int fico, int termYears, double initialPayment, boolean isJumboLoan) {
        double ratePercentage;

        // Base rate determination by credit score
        if (fico >= 750) {
            ratePercentage = 4.5;    // Prime rate for excellent credit
        } else if (fico >= 700) {
            ratePercentage = 5.0;    // Standard rate for good credit
        } else {
            ratePercentage = 6.0;    // Higher rate for fair/poor credit
        }

        // Apply term adjustments
        if (termYears == 15) {
            ratePercentage -= 0.5;    // Discount for shorter 15-year term
        } else if (termYears == 20) {
            ratePercentage -= 0.25;   // Small discount for 20-year term
        }                             // Standard rate for 30-year term

        // Apply jumbo loan premium if applicable
        if (isJumboLoan) {
            ratePercentage += 0.25;   // Premium for jumbo loans
        }

        return ratePercentage;
    }

    /**
     * Calculates the loan amount for fixed-rate mortgages
     * @param annualIncome The annual income
     * @param propertyValue The property value
     * @param initialPayment The down payment amount
     * @return The calculated loan amount
     */
    public static double calculateFixedLoanAmount(double annualIncome, double propertyValue, double initialPayment) {
        return propertyValue - initialPayment;
    }

    /**
     * Computes the monthly payment for a mortgage
     * @param ratePercentage The annual interest rate
     * @param termYears The mortgage term in years
     * @param financedAmount The loan amount
     * @return The calculated monthly payment
     */
    public static double computeMonthlyPayment(double ratePercentage, int termYears, double financedAmount) {
        // Convert annual rate to monthly rate
        double monthlyRate = ratePercentage / 12 / 100;
        int totalPayments = termYears * 12;

        // Apply standard mortgage payment formula
        return (financedAmount * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -totalPayments));
    }

    /**
     * Displays the details of a fixed-rate mortgage
     * @param ratePercentage The annual interest rate
     * @param financedAmount The loan amount
     * @param monthlyInstallment The monthly payment
     * @param isJumboLoan Flag indicating if this is a jumbo loan
     */
    public static void displayFixedLoanDetails(double ratePercentage, double financedAmount,
                                             double monthlyInstallment, boolean isJumboLoan) {
        DecimalFormat formatter = new DecimalFormat("#,##0.00");
        Random randomGenerator = new Random();
        int accountID = randomGenerator.nextInt(900000) + 100000;

        System.out.println("\n===== " + (isJumboLoan ? "JUMBO" : "STANDARD") + " MORTGAGE APPROVAL =====");
        System.out.println("Interest Rate: " + formatter.format(ratePercentage) + "%");
        System.out.println("Principal Amount: $" + formatter.format(financedAmount));
        System.out.println("Monthly Payment: $" + formatter.format(monthlyInstallment));
        System.out.println("Account ID: " + accountID);

        // Save loan details to file
        HomeLoanManager loanManager = new HomeLoanManager();
        loanManager.saveAccountData("src/HomeLoanData.csv", accountID, financedAmount, monthlyInstallment, isJumboLoan);

        System.out.println("\nYour application has been approved! Details saved to your account.");
        System.out.println("Returning to main menu...");
        displayMainMenu();
    }

    /**
     * Gets the appropriate adjustable interest rate for the selected term
     * @param adjustableTerm The ARM term selected
     * @param isJumboLoan Flag indicating if this is a jumbo loan
     * @return The adjusted interest rate percentage
     */
    private static double getAdjustableRateForTerm(int adjustableTerm, boolean isJumboLoan) {
        double baseRate = 0.0;

        // Select base rate by term
        if (adjustableTerm == 1) {
            baseRate = VARIABLE_INTEREST_RATES[0];
        } else if (adjustableTerm == 2) {
            baseRate = VARIABLE_INTEREST_RATES[1];
        } else if (adjustableTerm == 3) {
            baseRate = VARIABLE_INTEREST_RATES[2];
        } else if (adjustableTerm == 5) {
            baseRate = VARIABLE_INTEREST_RATES[3];
        } else {
            System.out.println("Invalid selection. Returning to main menu...");
            displayMainMenu();
        }

        // Apply jumbo loan premium if applicable
        if (isJumboLoan) {
            baseRate += 0.5; // Higher premium for jumbo ARMs due to increased risk
        }

        return baseRate;
    }

    /**
     * Calculates the loan amount for adjustable-rate mortgages
     * @param annualIncome The annual income
     * @param propertyValue The property value
     * @param initialPayment The down payment amount
     * @return The calculated loan amount
     */
    private static double calculateAdjustableLoanAmount(double annualIncome, double propertyValue, double initialPayment) {
        double maxFinancingAmount = calculateFixedLoanAmount(annualIncome, propertyValue, initialPayment);
        return maxFinancingAmount;
    }

    /**
     * Computes the monthly payment for an adjustable-rate mortgage
     * @param initialRate The initial interest rate
     * @param financedAmount The loan amount
     * @param adjustableTerm The ARM term selected
     * @return The calculated monthly payment
     */
    public static double computeAdjustableMonthlyPayment(double initialRate, double financedAmount, int adjustableTerm) {
        // For ARMs, calculate based on a 30-year amortization with initial fixed period
        double monthlyRate = initialRate / 12 / 100;
        int totalPayments = 30 * 12; // Standard 30-year term for ARMs
        return (financedAmount * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -totalPayments));
    }

    /**
     * Displays the details of an adjustable-rate mortgage
     * @param financedAmount The loan amount
     * @param monthlyInstallment The monthly payment
     * @param initialRate The initial interest rate
     * @param isJumboLoan Flag indicating if this is a jumbo loan
     */
    public static void displayAdjustableLoanDetails(double financedAmount, double monthlyInstallment,
                                                  double initialRate, boolean isJumboLoan) {
        Random randomGenerator = new Random();
        int accountID = randomGenerator.nextInt(900000) + 100000;
        DecimalFormat formatter = new DecimalFormat("#,##0.00");

        System.out.println("\n===== " + (isJumboLoan ? "JUMBO" : "STANDARD") + " ARM APPROVAL =====");
        System.out.println("Initial Interest Rate: " + formatter.format(initialRate) + "%");
        System.out.println("Principal Amount: $" + formatter.format(financedAmount));
        System.out.println("Initial Monthly Payment: $" + formatter.format(monthlyInstallment));
        System.out.println("Account ID: " + accountID);
        System.out.println("\nNOTE: Rate will adjust according to market conditions after the initial period.");

        // Save loan details to file
        HomeLoanManager loanManager = new HomeLoanManager();
        loanManager.saveAccountData("src/HomeLoanData.csv", accountID, financedAmount, monthlyInstallment, isJumboLoan);

        System.out.println("\nYour application has been approved! Details saved to your account.");
        System.out.println("Returning to main menu...");
        displayMainMenu();
    }

    /**
     * Processes mortgage payments
     */
    public static void processMortgagePayment() {
        processPaymentTransaction();
    }

    /**
     * Handles payment transactions for existing mortgages
     */
    public static void processPaymentTransaction() {
        System.out.println("\n===== MORTGAGE PAYMENT PROCESSING =====");
        System.out.print("Enter your account ID: ");
        int accountID = inputReader.nextInt();

        // Verify if account exists with provided ID
        boolean validAccount = false;
        try (BufferedReader reader = new BufferedReader(new FileReader("src/HomeLoanData.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                // Skip header row if present
                if (data[0].equals("Account ID")) {
                    continue;
                }

                int storedID = Integer.parseInt(data[0].trim());
                if (accountID == storedID) {
                    // Account found - display payment details
                    validAccount = true;
                    double monthlyAmount = Double.parseDouble(data[2].trim()); // Monthly payment at index 2
                    double remainingBalance = Double.parseDouble(data[1].trim()); // Balance at index 1
                    boolean isJumbo = data.length > 3 && Boolean.parseBoolean(data[3].trim()); // Jumbo flag at index 3

                    System.out.println("\n===== ACCOUNT INFORMATION =====");
                    System.out.println("Account ID: " + storedID);
                    System.out.println("Account Type: " + (isJumbo ? "Jumbo Mortgage" : "Standard Mortgage"));
                    System.out.println("Remaining Balance: $" + new DecimalFormat("#,##0.00").format(remainingBalance));
                    System.out.println("Monthly Payment: $" + new DecimalFormat("0.00").format(monthlyAmount));

                    // Get payment amount
                    double paymentAmount;
                    while (true) {
                        System.out.print("\nEnter payment amount: $");
                        paymentAmount = inputReader.nextDouble();
                        if (paymentAmount > remainingBalance) {
                            System.out.println("Payment exceeds remaining balance. Maximum payment: $" +
                                              new DecimalFormat("#,##0.00").format(remainingBalance));
                        } else {
                            break;
                        }
                    }

                    // Process payment (in a real system, this would update the database)
                    System.out.println("\nProcessing payment of $" +
                                      new DecimalFormat("#,##0.00").format(paymentAmount) + "...");
                    System.out.println("Payment processed successfully!");
                    System.out.println("New balance: $" +
                                      new DecimalFormat("#,##0.00").format(remainingBalance - paymentAmount));

                    // In a real system, would update the CSV file with new balance here
                    updateLoanBalance(accountID, remainingBalance - paymentAmount);

                    break; // Exit once account is found
                }
            }
        } catch (IOException e) {
            System.out.println("Error processing payment: " + e.getMessage());
            e.printStackTrace();
        }

        // Account not found handling
        if (!validAccount) {
            System.out.println("No account found with ID: " + accountID);
        }

        // Return to main menu
        System.out.println("\nReturning to main menu...");
    }

    /**
     * Updates loan balance in the database after payment
     * @param accountID The account ID
     * @param newBalance The updated balance
     */
    private static void updateLoanBalance(int accountID, double newBalance) {
        // In a real system, this would update the CSV file with the new balance
        // This is a placeholder for actual database update logic
        System.out.println("Database updated with new balance information.");
    }

    /**
     * Verifies account in database
     * @param storedID The ID to check against
     * @param accountID The user-provided account ID
     * @return True if account is verified, false otherwise
     */
    public boolean authenticateAccount(int storedID, int accountID) {
        String dataFile = "src/HomeLoanData.csv";
        String line;
        String dataSeparator = ",";

        try (BufferedReader reader = new BufferedReader(new FileReader(dataFile))) {
            reader.readLine(); // Skip header row
            while ((line = reader.readLine()) != null) {
                String[] accountData = line.split(dataSeparator);
                int accountIDFromFile = Integer.parseInt(accountData[0].trim());
                if (accountIDFromFile == accountID) {
                    return true; // Account verified
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false; // Account not found
    }

    /**
     * Saves account data to CSV file
     * @param filename The base filename (not used directly)
     * @param accountID The account ID
     * @param financedAmount The loan amount
     * @param monthlyInstallment The monthly payment
     * @param isJumboLoan Flag indicating if this is a jumbo loan
     */
    public void saveAccountData(String filename, int accountID, double financedAmount,
                               double monthlyInstallment, boolean isJumboLoan) {
        String folderPath = "data";
        File folder = new File(folderPath);
        if (!folder.exists()) {
            folder.mkdir(); // Create folder if needed
        }

        String filePath = folderPath + File.separator + "HomeLoanData" + ".csv";
        try (FileWriter writer = new FileWriter(filePath, true)) { // Append mode
            // Create header if file is new or doesn't exist
            File dataFile = new File(filePath);
            if (!dataFile.exists() || dataFile.length() == 0) {
                writer.write("Account ID,Loan Balance,Monthly Payment,Is Jumbo\n");
            }

            // Write account data with jumbo loan indicator
            writer.write(accountID + "," + financedAmount + "," + monthlyInstallment + "," + isJumboLoan + "\n");
            System.out.println("Account data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving account data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Updates account data in CSV file
     * @param fileName The source file containing update data
     */
    public void updateAccountData(String fileName) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/HomeLoanData.csv", true));
             BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            System.out.println("\nUpdating account information from " + fileName + ":");
            while ((line = reader.readLine()) != null) {
                // Process account updates here
                // Example: Add payment marker
                line += ",Updated";
                writer.write(line);
                writer.newLine();
                System.out.println(line);
            }
            System.out.println("Account information updated successfully.");
        } catch (IOException e) {
            System.out.println("Error updating account data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Processes a jumbo mortgage application
     * Special method for handling jumbo-specific loan features
     * @param fico The credit score
     * @param annualIncome The annual income
     * @param initialPayment The down payment amount
     * @param propertyValue The property value
     */
    public static void processJumboMortgage(int fico, double annualIncome, double initialPayment, double propertyValue) {
        // Verify jumbo loan eligibility
        if (fico < JUMBO_MIN_CREDIT_SCORE) {
            System.out.println("Jumbo mortgages require a minimum credit score of " + (int)JUMBO_MIN_CREDIT_SCORE);
            System.out.println("Your application cannot proceed at this time.");
            displayMainMenu();
            return;
        }

        // Verify property value meets jumbo threshold
        if (propertyValue - initialPayment < JUMBO_LOAN_THRESHOLD) {
            System.out.println("The loan amount does not meet the jumbo mortgage minimum threshold of $" +
                              new DecimalFormat("#,###.00").format(JUMBO_LOAN_THRESHOLD));
            System.out.println("Please apply for a standard mortgage instead.");
            displayMainMenu();
            return;
        }

        // Verify down payment percentage
        double downPaymentPercentage = (initialPayment / propertyValue) * 100;
        if (downPaymentPercentage < JUMBO_MIN_DOWN_PAYMENT_PERCENT) {
            System.out.println("Jumbo mortgages require a minimum down payment of " +
                              JUMBO_MIN_DOWN_PAYMENT_PERCENT + "%");
System.out.println("Jumbo mortgages require a minimum down payment of " +
                              JUMBO_MIN_DOWN_PAYMENT_PERCENT + "%");
            System.out.println("Your down payment is only " +
                              new DecimalFormat("0.00").format(downPaymentPercentage) + "%");
            displayMainMenu();
            return;
        }

        // Calculate DTI for jumbo loans (stricter requirements)
        double monthlyIncome = annualIncome / 12;
        System.out.print("Enter your total monthly debt obligations: $");
        double monthlyDebt = inputReader.nextDouble();
        double dti = (monthlyDebt / monthlyIncome) * 100;

        if (dti > 43) { // Stricter DTI for jumbo loans
            System.out.println("Your debt-to-income ratio of " +
                              new DecimalFormat("0.00").format(dti) + "% exceeds our maximum threshold of 43% for jumbo loans.");
            System.out.println("Your application cannot proceed at this time.");
            displayMainMenu();
            return;
        }

        // Proceed with jumbo loan processing
        System.out.println("\nYou qualify for a jumbo mortgage based on preliminary criteria.");
        System.out.println("Select a jumbo mortgage product:");
        System.out.println("1. Fixed-rate jumbo mortgage");
        System.out.println("2. Adjustable-rate jumbo mortgage");
        System.out.print("Enter your choice (1 or 2): ");

        int mortgageTypeChoice = inputReader.nextInt();
        selectMortgageType(fico, annualIncome, initialPayment, propertyValue, true);
    }

    /**
     * Utility function to generate loan amortization schedules
     * @param loanAmount The principal loan amount
     * @param interestRate The annual interest rate percentage
     * @param termYears The loan term in years
     */
    public static void generateAmortizationSchedule(double loanAmount, double interestRate, int termYears) {
        System.out.println("\n===== AMORTIZATION SCHEDULE =====");
        System.out.println("Loan Amount: $" + new DecimalFormat("#,##0.00").format(loanAmount));
        System.out.println("Interest Rate: " + interestRate + "%");
        System.out.println("Term: " + termYears + " years");

        double monthlyRate = interestRate / 12 / 100;
        int totalPayments = termYears * 12;
        double monthlyPayment = computeMonthlyPayment(interestRate, termYears, loanAmount);

        System.out.println("Monthly Payment: $" + new DecimalFormat("#,##0.00").format(monthlyPayment));
        System.out.println("\nPayment\tPrincipal\tInterest\tRemaining Balance");

        double remainingBalance = loanAmount;
        DecimalFormat df = new DecimalFormat("#,##0.00");

        for (int paymentNum = 1; paymentNum <= totalPayments; paymentNum++) {
            double interestPayment = remainingBalance * monthlyRate;
            double principalPayment = monthlyPayment - interestPayment;
            remainingBalance -= principalPayment;

            // Print first few payments and last few payments
            if (paymentNum <= 12 || paymentNum > totalPayments - 12) {
                System.out.println(paymentNum + "\t$" + df.format(principalPayment) +
                                  "\t$" + df.format(interestPayment) +
                                  "\t$" + df.format(remainingBalance));
            } else if (paymentNum == 13) {
                System.out.println("...");
            }
        }
    }

    /**
     * Validates loan processing status by account ID
     * @param accountID The account ID to validate
     * @return True if valid and active, false otherwise
     */
    public boolean validateLoanStatus(int accountID) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/HomeLoanData.csv"))) {
            String line;
            reader.readLine(); // Skip header

            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                if (Integer.parseInt(data[0]) == accountID) {
                    return true; // Account found and active
                }
            }
        } catch (IOException e) {
            System.out.println("Error validating loan status: " + e.getMessage());
        }
        return false; // Account not found
    }

    /**
     * Processes early loan payoff calculations
     * @param accountID The account ID
     * @param currentBalance The current loan balance
     * @return The payoff amount with any applicable fees
     */
    public double calculateEarlyPayoff(int accountID, double currentBalance) {
        // In a real system, would check for early payoff penalties
        // For simplicity, we'll assume a 1% early payoff fee for loans less than 5 years old
        double earlyPayoffFee = currentBalance * 0.01;
        return currentBalance + earlyPayoffFee;
    }

    /**
     * Processes loan refinancing options
     * @param accountID The account ID
     * @param currentBalance The current loan balance
     * @param currentRate The current interest rate
     */
    public void processRefinanceOptions(int accountID, double currentBalance, double currentRate) {
        System.out.println("\n===== REFINANCE OPTIONS =====");
        System.out.println("Current Loan Balance: $" + new DecimalFormat("#,##0.00").format(currentBalance));
        System.out.println("Current Interest Rate: " + currentRate + "%");

        // Determine current market rates (would be pulled from external source in real system)
        double marketRate = currentRate - 0.75; // Simulate lower market rate
        System.out.println("Current Market Rate: " + marketRate + "%");

        // Estimate new monthly payment
        double newMonthlyPayment = computeMonthlyPayment(marketRate, 30, currentBalance);
        System.out.println("Estimated New Monthly Payment: $" + new DecimalFormat("#,##0.00").format(newMonthlyPayment));

        // Calculate refinance costs
        double closingCosts = currentBalance * 0.02; // Assume 2% closing costs
        System.out.println("Estimated Closing Costs: $" + new DecimalFormat("#,##0.00").format(closingCosts));

        // Calculate break-even point
        // Current payment would come from database in real system
        double currentMonthlyPayment = computeMonthlyPayment(currentRate, 30, currentBalance);
        double monthlySavings = currentMonthlyPayment - newMonthlyPayment;
        double breakEvenMonths = closingCosts / monthlySavings;

        System.out.println("Break-even Point: " + (int)Math.ceil(breakEvenMonths) + " months");
        System.out.println("\nWould you like to apply for refinancing? (Y/N)");

        String refinanceChoice = inputReader.next();
        if (refinanceChoice.equalsIgnoreCase("Y")) {
            System.out.println("Starting refinance application process...");
            // In a real system, would start new application process preserving customer data
        } else {
            System.out.println("Returning to main menu...");
        }
    }

    /**
     * Allows user to update their contact information
     * @param accountID The account ID
     */
    public void updateContactInformation(int accountID) {
        System.out.println("\n===== UPDATE CONTACT INFORMATION =====");
        System.out.println("Please enter your updated information:");

        inputReader.nextLine(); // Clear buffer
        System.out.print("Address: ");
        String address = inputReader.nextLine();

        System.out.print("Phone Number: ");
        String phoneNumber = inputReader.nextLine();

        System.out.print("Email: ");
        String email = inputReader.nextLine();

        // In a real system, would update customer database
        System.out.println("\nContact information updated successfully!");

        // Log update for audit purposes
        try (FileWriter writer = new FileWriter("update_log.txt", true)) {
            writer.write("Account " + accountID + " information updated on " +
                        java.time.LocalDate.now() + "\n");
        } catch (IOException e) {
            System.out.println("Error logging update: " + e.getMessage());
        }
    }

    /**
     * Main method to run the application
     * This provides a more comprehensive entry point with error handling
     */
    public static void main() {
        System.out.println("Starting Home Loan Management System...");

        try {
            // Create data directory if it doesn't exist
            File dataDir = new File("data");
            if (!dataDir.exists()) {
                dataDir.mkdir();
                System.out.println("Created data directory for loan information storage.");
            }

            // Display welcome message
            System.out.println("\nWelcome to the Home Loan Management System");
            System.out.println("This system allows you to apply for and manage mortgage loans");
            System.out.println("=====================================");

            // Display the main menu
            displayMainMenu();

        } catch (Exception e) {
            System.out.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace();
            System.out.println("The system will now exit.");
            System.exit(1);
        } finally {
            // Close resources
            if (inputReader != null) {
                inputReader.close();
            }
            System.out.println("Thank you for using Home Loan Manager. Goodbye!");
        }
    }
}
